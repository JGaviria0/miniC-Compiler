Grammar:

Rule 0     S' -> program
Rule 1     program -> translation_unit
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     translation_unit -> external_declaration
Rule 4     external_declaration -> declaration
Rule 5     external_declaration -> function_definition
Rule 6     function_definition -> STATIC type_specifier declarator compound_statement
Rule 7     function_definition -> type_specifier declarator compound_statement
Rule 8     declaration -> EXTERN type_specifier declarator ;
Rule 9     declaration -> type_specifier declarator ;
Rule 10    declaration_list_opt -> declaration_list
Rule 11    declaration_list_opt -> empty
Rule 12    declaration_list -> declaration_list declaration
Rule 13    declaration_list -> declaration
Rule 14    type_specifier -> VOID
Rule 15    type_specifier -> CHAR
Rule 16    type_specifier -> FLOAT
Rule 17    type_specifier -> INT
Rule 18    declarator -> * declarator
Rule 19    declarator -> direct_declarator
Rule 20    direct_declarator -> direct_declarator ( )
Rule 21    direct_declarator -> direct_declarator ( parameter_type_list )
Rule 22    direct_declarator -> ID
Rule 23    parameter_type_list -> parameter_list , ELLIPSIS
Rule 24    parameter_type_list -> parameter_list
Rule 25    parameter_list -> parameter_list , parameter_declaration
Rule 26    parameter_list -> parameter_declaration
Rule 27    parameter_declaration -> type_specifier declarator
Rule 28    compound_statement -> { declaration_list_opt }
Rule 29    compound_statement -> { declaration_list_opt statement_list }
Rule 30    expression_statement -> expression ;
Rule 31    expression -> assigment_expression
Rule 32    expression -> equality_expression
Rule 33    assigment_expression -> equality_expression SUBEQ expression
Rule 34    assigment_expression -> equality_expression MULEQ expression
Rule 35    assigment_expression -> equality_expression DIVEQ expression
Rule 36    assigment_expression -> equality_expression MODEQ expression
Rule 37    assigment_expression -> equality_expression ADDEQ expression
Rule 38    assigment_expression -> equality_expression = expression
Rule 39    equality_expression -> equality_expression NE relational_expression
Rule 40    equality_expression -> equality_expression EQ relational_expression
Rule 41    equality_expression -> relational_expression
Rule 42    relational_expression -> relational_expression GE additive_expression
Rule 43    relational_expression -> relational_expression LAND additive_expression
Rule 44    relational_expression -> relational_expression LOR additive_expression
Rule 45    relational_expression -> relational_expression > additive_expression
Rule 46    relational_expression -> relational_expression LE additive_expression
Rule 47    relational_expression -> relational_expression GT additive_expression
Rule 48    relational_expression -> relational_expression LT additive_expression
Rule 49    relational_expression -> relational_expression < additive_expression
Rule 50    relational_expression -> additive_expression
Rule 51    postfix_expression -> postfix_expression [ expression ]
Rule 52    postfix_expression -> postfix_expression ( )
Rule 53    postfix_expression -> postfix_expression ( argument_expression_list )
Rule 54    postfix_expression -> primary_expression
Rule 55    argument_expression_list -> argument_expression_list , expression
Rule 56    argument_expression_list -> expression
Rule 57    unary_expression -> & unary_expression
Rule 58    unary_expression -> * unary_expression
Rule 59    unary_expression -> ! unary_expression
Rule 60    unary_expression -> + unary_expression
Rule 61    unary_expression -> - unary_expression
Rule 62    unary_expression -> postfix_expression
Rule 63    mult_expression -> mult_expression % unary_expression
Rule 64    mult_expression -> mult_expression / unary_expression
Rule 65    mult_expression -> mult_expression * unary_expression
Rule 66    mult_expression -> unary_expression
Rule 67    additive_expression -> additive_expression - mult_expression
Rule 68    additive_expression -> additive_expression + mult_expression
Rule 69    additive_expression -> mult_expression
Rule 70    primary_expression -> ( expression )
Rule 71    primary_expression -> string_literal
Rule 72    primary_expression -> CHARACTER
Rule 73    primary_expression -> CONST
Rule 74    primary_expression -> FNUMBER
Rule 75    primary_expression -> INUMBER
Rule 76    primary_expression -> ID
Rule 77    string_literal -> string_literal STRING
Rule 78    string_literal -> STRING
Rule 79    jumpstatement -> CONTINUE ;
Rule 80    jumpstatement -> BREAK ;
Rule 81    jumpstatement -> RETURN expression ;
Rule 82    jumpstatement -> RETURN ;
Rule 83    statement -> closed_statement
Rule 84    statement -> open_statement
Rule 85    other_statement -> jumpstatement
Rule 86    other_statement -> expression_statement
Rule 87    other_statement -> compound_statement
Rule 88    open_statement -> FOR ( for_cond ) open_statement
Rule 89    open_statement -> IF ( expression ) open
Rule 90    open_statement -> WHILE ( expression ) open_statement
Rule 91    open_statement -> IF ( expression ) open_statement
Rule 92    open_statement -> IF ( expression ) other_statement
Rule 93    open -> closed_statement ELSE open_statement
Rule 94    for_cond -> expression_statement double_expression
Rule 95    double_expression -> expression_statement expression
Rule 96    closed_statement -> FOR ( for_cond ) closed_statement
Rule 97    closed_statement -> WHILE ( expression ) closed_statement
Rule 98    closed_statement -> IF ( expression ) closed
Rule 99    closed_statement -> other_statement
Rule 100   closed -> closed_statement ELSE closed_statement
Rule 101   statement_list -> statement_list statement
Rule 102   statement_list -> statement
Rule 103   empty -> <empty>

Terminals, with rules where they appear:

!                    : 59
%                    : 63
&                    : 57
(                    : 20 21 52 53 70 88 89 90 91 92 96 97 98
)                    : 20 21 52 53 70 88 89 90 91 92 96 97 98
*                    : 18 58 65
+                    : 60 68
,                    : 23 25 55
-                    : 61 67
/                    : 64
;                    : 8 9 30 79 80 81 82
<                    : 49
=                    : 38
>                    : 45
ADDEQ                : 37
BREAK                : 80
CHAR                 : 15
CHARACTER            : 72
CONST                : 73
CONTINUE             : 79
DIVEQ                : 35
ELLIPSIS             : 23
ELSE                 : 93 100
EQ                   : 40
EXTERN               : 8
FLOAT                : 16
FNUMBER              : 74
FOR                  : 88 96
GE                   : 42
GT                   : 47
ID                   : 22 76
IF                   : 89 91 92 98
INT                  : 17
INUMBER              : 75
LAND                 : 43
LE                   : 46
LOR                  : 44
LT                   : 48
MODEQ                : 36
MULEQ                : 34
NE                   : 39
RETURN               : 81 82
STATIC               : 6
STRING               : 77 78
SUBEQ                : 33
VOID                 : 14
WHILE                : 90 97
[                    : 51
]                    : 51
error                : 
{                    : 28 29
}                    : 28 29

Nonterminals, with rules where they appear:

additive_expression  : 42 43 44 45 46 47 48 49 50 67 68
argument_expression_list : 53 55
assigment_expression : 31
closed               : 98
closed_statement     : 83 93 96 97 100 100
compound_statement   : 6 7 87
declaration          : 4 12 13
declaration_list     : 10 12
declaration_list_opt : 28 29
declarator           : 6 7 8 9 18 27
direct_declarator    : 19 20 21
double_expression    : 94
empty                : 11
equality_expression  : 32 33 34 35 36 37 38 39 40
expression           : 30 33 34 35 36 37 38 51 55 56 70 81 89 90 91 92 95 97 98
expression_statement : 86 94 95
external_declaration : 2 3
for_cond             : 88 96
function_definition  : 5
jumpstatement        : 85
mult_expression      : 63 64 65 67 68 69
open                 : 89
open_statement       : 84 88 90 91 93
other_statement      : 92 99
parameter_declaration : 25 26
parameter_list       : 23 24 25
parameter_type_list  : 21
postfix_expression   : 51 52 53 62
primary_expression   : 54
program              : 0
relational_expression : 39 40 41 42 43 44 45 46 47 48 49
statement            : 101 102
statement_list       : 29 101
string_literal       : 71 77
translation_unit     : 1 2
type_specifier       : 6 7 8 9 27
unary_expression     : 57 58 59 60 61 63 64 65 66


state 0

    (0) S' -> . program
    (1) program -> . translation_unit
    (2) translation_unit -> . translation_unit external_declaration
    (3) translation_unit -> . external_declaration
    (4) external_declaration -> . declaration
    (5) external_declaration -> . function_definition
    (8) declaration -> . EXTERN type_specifier declarator ;
    (9) declaration -> . type_specifier declarator ;
    (6) function_definition -> . STATIC type_specifier declarator compound_statement
    (7) function_definition -> . type_specifier declarator compound_statement
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . FLOAT
    (17) type_specifier -> . INT
    EXTERN          shift and go to state 6
    STATIC          shift and go to state 8
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    program                        shift and go to state 1
    translation_unit               shift and go to state 2
    external_declaration           shift and go to state 3
    declaration                    shift and go to state 4
    function_definition            shift and go to state 5
    type_specifier                 shift and go to state 7

state 1

    (0) S' -> program .


state 2

    (1) program -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (4) external_declaration -> . declaration
    (5) external_declaration -> . function_definition
    (8) declaration -> . EXTERN type_specifier declarator ;
    (9) declaration -> . type_specifier declarator ;
    (6) function_definition -> . STATIC type_specifier declarator compound_statement
    (7) function_definition -> . type_specifier declarator compound_statement
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . FLOAT
    (17) type_specifier -> . INT
    $end            reduce using rule 1 (program -> translation_unit .)
    EXTERN          shift and go to state 6
    STATIC          shift and go to state 8
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    external_declaration           shift and go to state 13
    declaration                    shift and go to state 4
    function_definition            shift and go to state 5
    type_specifier                 shift and go to state 7

state 3

    (3) translation_unit -> external_declaration .
    EXTERN          reduce using rule 3 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 3 (translation_unit -> external_declaration .)
    VOID            reduce using rule 3 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 3 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 3 (translation_unit -> external_declaration .)
    INT             reduce using rule 3 (translation_unit -> external_declaration .)
    $end            reduce using rule 3 (translation_unit -> external_declaration .)


state 4

    (4) external_declaration -> declaration .
    EXTERN          reduce using rule 4 (external_declaration -> declaration .)
    STATIC          reduce using rule 4 (external_declaration -> declaration .)
    VOID            reduce using rule 4 (external_declaration -> declaration .)
    CHAR            reduce using rule 4 (external_declaration -> declaration .)
    FLOAT           reduce using rule 4 (external_declaration -> declaration .)
    INT             reduce using rule 4 (external_declaration -> declaration .)
    $end            reduce using rule 4 (external_declaration -> declaration .)


state 5

    (5) external_declaration -> function_definition .
    EXTERN          reduce using rule 5 (external_declaration -> function_definition .)
    STATIC          reduce using rule 5 (external_declaration -> function_definition .)
    VOID            reduce using rule 5 (external_declaration -> function_definition .)
    CHAR            reduce using rule 5 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 5 (external_declaration -> function_definition .)
    INT             reduce using rule 5 (external_declaration -> function_definition .)
    $end            reduce using rule 5 (external_declaration -> function_definition .)


state 6

    (8) declaration -> EXTERN . type_specifier declarator ;
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . FLOAT
    (17) type_specifier -> . INT
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    type_specifier                 shift and go to state 14

state 7

    (9) declaration -> type_specifier . declarator ;
    (7) function_definition -> type_specifier . declarator compound_statement
    (18) declarator -> . * declarator
    (19) declarator -> . direct_declarator
    (20) direct_declarator -> . direct_declarator ( )
    (21) direct_declarator -> . direct_declarator ( parameter_type_list )
    (22) direct_declarator -> . ID
    *               shift and go to state 16
    ID              shift and go to state 18

    declarator                     shift and go to state 15
    direct_declarator              shift and go to state 17

state 8

    (6) function_definition -> STATIC . type_specifier declarator compound_statement
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . FLOAT
    (17) type_specifier -> . INT
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    type_specifier                 shift and go to state 19

state 9

    (14) type_specifier -> VOID .
    *               reduce using rule 14 (type_specifier -> VOID .)
    ID              reduce using rule 14 (type_specifier -> VOID .)


state 10

    (15) type_specifier -> CHAR .
    *               reduce using rule 15 (type_specifier -> CHAR .)
    ID              reduce using rule 15 (type_specifier -> CHAR .)


state 11

    (16) type_specifier -> FLOAT .
    *               reduce using rule 16 (type_specifier -> FLOAT .)
    ID              reduce using rule 16 (type_specifier -> FLOAT .)


state 12

    (17) type_specifier -> INT .
    *               reduce using rule 17 (type_specifier -> INT .)
    ID              reduce using rule 17 (type_specifier -> INT .)


state 13

    (2) translation_unit -> translation_unit external_declaration .
    EXTERN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 14

    (8) declaration -> EXTERN type_specifier . declarator ;
    (18) declarator -> . * declarator
    (19) declarator -> . direct_declarator
    (20) direct_declarator -> . direct_declarator ( )
    (21) direct_declarator -> . direct_declarator ( parameter_type_list )
    (22) direct_declarator -> . ID
    *               shift and go to state 16
    ID              shift and go to state 18

    declarator                     shift and go to state 20
    direct_declarator              shift and go to state 17

state 15

    (9) declaration -> type_specifier declarator . ;
    (7) function_definition -> type_specifier declarator . compound_statement
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    ;               shift and go to state 21
    {               shift and go to state 23

    compound_statement             shift and go to state 22

state 16

    (18) declarator -> * . declarator
    (18) declarator -> . * declarator
    (19) declarator -> . direct_declarator
    (20) direct_declarator -> . direct_declarator ( )
    (21) direct_declarator -> . direct_declarator ( parameter_type_list )
    (22) direct_declarator -> . ID
    *               shift and go to state 16
    ID              shift and go to state 18

    declarator                     shift and go to state 24
    direct_declarator              shift and go to state 17

state 17

    (19) declarator -> direct_declarator .
    (20) direct_declarator -> direct_declarator . ( )
    (21) direct_declarator -> direct_declarator . ( parameter_type_list )
    ;               reduce using rule 19 (declarator -> direct_declarator .)
    {               reduce using rule 19 (declarator -> direct_declarator .)
    ,               reduce using rule 19 (declarator -> direct_declarator .)
    )               reduce using rule 19 (declarator -> direct_declarator .)
    (               shift and go to state 25


state 18

    (22) direct_declarator -> ID .
    (               reduce using rule 22 (direct_declarator -> ID .)
    ;               reduce using rule 22 (direct_declarator -> ID .)
    {               reduce using rule 22 (direct_declarator -> ID .)
    ,               reduce using rule 22 (direct_declarator -> ID .)
    )               reduce using rule 22 (direct_declarator -> ID .)


state 19

    (6) function_definition -> STATIC type_specifier . declarator compound_statement
    (18) declarator -> . * declarator
    (19) declarator -> . direct_declarator
    (20) direct_declarator -> . direct_declarator ( )
    (21) direct_declarator -> . direct_declarator ( parameter_type_list )
    (22) direct_declarator -> . ID
    *               shift and go to state 16
    ID              shift and go to state 18

    declarator                     shift and go to state 26
    direct_declarator              shift and go to state 17

state 20

    (8) declaration -> EXTERN type_specifier declarator . ;
    ;               shift and go to state 27


state 21

    (9) declaration -> type_specifier declarator ; .
    EXTERN          reduce using rule 9 (declaration -> type_specifier declarator ; .)
    STATIC          reduce using rule 9 (declaration -> type_specifier declarator ; .)
    VOID            reduce using rule 9 (declaration -> type_specifier declarator ; .)
    CHAR            reduce using rule 9 (declaration -> type_specifier declarator ; .)
    FLOAT           reduce using rule 9 (declaration -> type_specifier declarator ; .)
    INT             reduce using rule 9 (declaration -> type_specifier declarator ; .)
    $end            reduce using rule 9 (declaration -> type_specifier declarator ; .)
    }               reduce using rule 9 (declaration -> type_specifier declarator ; .)
    FOR             reduce using rule 9 (declaration -> type_specifier declarator ; .)
    WHILE           reduce using rule 9 (declaration -> type_specifier declarator ; .)
    IF              reduce using rule 9 (declaration -> type_specifier declarator ; .)
    CONTINUE        reduce using rule 9 (declaration -> type_specifier declarator ; .)
    BREAK           reduce using rule 9 (declaration -> type_specifier declarator ; .)
    RETURN          reduce using rule 9 (declaration -> type_specifier declarator ; .)
    {               reduce using rule 9 (declaration -> type_specifier declarator ; .)
    &               reduce using rule 9 (declaration -> type_specifier declarator ; .)
    *               reduce using rule 9 (declaration -> type_specifier declarator ; .)
    !               reduce using rule 9 (declaration -> type_specifier declarator ; .)
    +               reduce using rule 9 (declaration -> type_specifier declarator ; .)
    -               reduce using rule 9 (declaration -> type_specifier declarator ; .)
    (               reduce using rule 9 (declaration -> type_specifier declarator ; .)
    CHARACTER       reduce using rule 9 (declaration -> type_specifier declarator ; .)
    CONST           reduce using rule 9 (declaration -> type_specifier declarator ; .)
    FNUMBER         reduce using rule 9 (declaration -> type_specifier declarator ; .)
    INUMBER         reduce using rule 9 (declaration -> type_specifier declarator ; .)
    ID              reduce using rule 9 (declaration -> type_specifier declarator ; .)
    STRING          reduce using rule 9 (declaration -> type_specifier declarator ; .)


state 22

    (7) function_definition -> type_specifier declarator compound_statement .
    EXTERN          reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    STATIC          reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    VOID            reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    INT             reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    $end            reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)


state 23

    (28) compound_statement -> { . declaration_list_opt }
    (29) compound_statement -> { . declaration_list_opt statement_list }
    (10) declaration_list_opt -> . declaration_list
    (11) declaration_list_opt -> . empty
    (12) declaration_list -> . declaration_list declaration
    (13) declaration_list -> . declaration
    (103) empty -> .
    (8) declaration -> . EXTERN type_specifier declarator ;
    (9) declaration -> . type_specifier declarator ;
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . FLOAT
    (17) type_specifier -> . INT
    }               reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    CONTINUE        reduce using rule 103 (empty -> .)
    BREAK           reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    {               reduce using rule 103 (empty -> .)
    &               reduce using rule 103 (empty -> .)
    *               reduce using rule 103 (empty -> .)
    !               reduce using rule 103 (empty -> .)
    +               reduce using rule 103 (empty -> .)
    -               reduce using rule 103 (empty -> .)
    (               reduce using rule 103 (empty -> .)
    CHARACTER       reduce using rule 103 (empty -> .)
    CONST           reduce using rule 103 (empty -> .)
    FNUMBER         reduce using rule 103 (empty -> .)
    INUMBER         reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    STRING          reduce using rule 103 (empty -> .)
    EXTERN          shift and go to state 6
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    declaration_list_opt           shift and go to state 28
    declaration_list               shift and go to state 29
    empty                          shift and go to state 30
    declaration                    shift and go to state 31
    type_specifier                 shift and go to state 32

state 24

    (18) declarator -> * declarator .
    ;               reduce using rule 18 (declarator -> * declarator .)
    {               reduce using rule 18 (declarator -> * declarator .)
    ,               reduce using rule 18 (declarator -> * declarator .)
    )               reduce using rule 18 (declarator -> * declarator .)


state 25

    (20) direct_declarator -> direct_declarator ( . )
    (21) direct_declarator -> direct_declarator ( . parameter_type_list )
    (23) parameter_type_list -> . parameter_list , ELLIPSIS
    (24) parameter_type_list -> . parameter_list
    (25) parameter_list -> . parameter_list , parameter_declaration
    (26) parameter_list -> . parameter_declaration
    (27) parameter_declaration -> . type_specifier declarator
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . FLOAT
    (17) type_specifier -> . INT
    )               shift and go to state 33
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    parameter_type_list            shift and go to state 34
    parameter_list                 shift and go to state 35
    parameter_declaration          shift and go to state 36
    type_specifier                 shift and go to state 37

state 26

    (6) function_definition -> STATIC type_specifier declarator . compound_statement
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    {               shift and go to state 23

    compound_statement             shift and go to state 38

state 27

    (8) declaration -> EXTERN type_specifier declarator ; .
    EXTERN          reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    STATIC          reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    VOID            reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    CHAR            reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    FLOAT           reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    INT             reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    $end            reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    }               reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    FOR             reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    WHILE           reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    IF              reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    CONTINUE        reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    BREAK           reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    RETURN          reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    {               reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    &               reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    *               reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    !               reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    +               reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    -               reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    (               reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    CHARACTER       reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    CONST           reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    FNUMBER         reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    INUMBER         reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    ID              reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    STRING          reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)


state 28

    (28) compound_statement -> { declaration_list_opt . }
    (29) compound_statement -> { declaration_list_opt . statement_list }
    (101) statement_list -> . statement_list statement
    (102) statement_list -> . statement
    (83) statement -> . closed_statement
    (84) statement -> . open_statement
    (96) closed_statement -> . FOR ( for_cond ) closed_statement
    (97) closed_statement -> . WHILE ( expression ) closed_statement
    (98) closed_statement -> . IF ( expression ) closed
    (99) closed_statement -> . other_statement
    (88) open_statement -> . FOR ( for_cond ) open_statement
    (89) open_statement -> . IF ( expression ) open
    (90) open_statement -> . WHILE ( expression ) open_statement
    (91) open_statement -> . IF ( expression ) open_statement
    (92) open_statement -> . IF ( expression ) other_statement
    (85) other_statement -> . jumpstatement
    (86) other_statement -> . expression_statement
    (87) other_statement -> . compound_statement
    (79) jumpstatement -> . CONTINUE ;
    (80) jumpstatement -> . BREAK ;
    (81) jumpstatement -> . RETURN expression ;
    (82) jumpstatement -> . RETURN ;
    (30) expression_statement -> . expression ;
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    }               shift and go to state 39
    FOR             shift and go to state 44
    WHILE           shift and go to state 46
    IF              shift and go to state 48
    CONTINUE        shift and go to state 53
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    {               shift and go to state 23
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    statement_list                 shift and go to state 40
    statement                      shift and go to state 41
    closed_statement               shift and go to state 42
    open_statement                 shift and go to state 43
    expression                     shift and go to state 47
    other_statement                shift and go to state 49
    jumpstatement                  shift and go to state 50
    expression_statement           shift and go to state 51
    compound_statement             shift and go to state 52
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 29

    (10) declaration_list_opt -> declaration_list .
    (12) declaration_list -> declaration_list . declaration
    (8) declaration -> . EXTERN type_specifier declarator ;
    (9) declaration -> . type_specifier declarator ;
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . FLOAT
    (17) type_specifier -> . INT
    }               reduce using rule 10 (declaration_list_opt -> declaration_list .)
    FOR             reduce using rule 10 (declaration_list_opt -> declaration_list .)
    WHILE           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    IF              reduce using rule 10 (declaration_list_opt -> declaration_list .)
    CONTINUE        reduce using rule 10 (declaration_list_opt -> declaration_list .)
    BREAK           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    RETURN          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    {               reduce using rule 10 (declaration_list_opt -> declaration_list .)
    &               reduce using rule 10 (declaration_list_opt -> declaration_list .)
    *               reduce using rule 10 (declaration_list_opt -> declaration_list .)
    !               reduce using rule 10 (declaration_list_opt -> declaration_list .)
    +               reduce using rule 10 (declaration_list_opt -> declaration_list .)
    -               reduce using rule 10 (declaration_list_opt -> declaration_list .)
    (               reduce using rule 10 (declaration_list_opt -> declaration_list .)
    CHARACTER       reduce using rule 10 (declaration_list_opt -> declaration_list .)
    CONST           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    FNUMBER         reduce using rule 10 (declaration_list_opt -> declaration_list .)
    INUMBER         reduce using rule 10 (declaration_list_opt -> declaration_list .)
    ID              reduce using rule 10 (declaration_list_opt -> declaration_list .)
    STRING          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    EXTERN          shift and go to state 6
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    declaration                    shift and go to state 76
    type_specifier                 shift and go to state 32

state 30

    (11) declaration_list_opt -> empty .
    }               reduce using rule 11 (declaration_list_opt -> empty .)
    FOR             reduce using rule 11 (declaration_list_opt -> empty .)
    WHILE           reduce using rule 11 (declaration_list_opt -> empty .)
    IF              reduce using rule 11 (declaration_list_opt -> empty .)
    CONTINUE        reduce using rule 11 (declaration_list_opt -> empty .)
    BREAK           reduce using rule 11 (declaration_list_opt -> empty .)
    RETURN          reduce using rule 11 (declaration_list_opt -> empty .)
    {               reduce using rule 11 (declaration_list_opt -> empty .)
    &               reduce using rule 11 (declaration_list_opt -> empty .)
    *               reduce using rule 11 (declaration_list_opt -> empty .)
    !               reduce using rule 11 (declaration_list_opt -> empty .)
    +               reduce using rule 11 (declaration_list_opt -> empty .)
    -               reduce using rule 11 (declaration_list_opt -> empty .)
    (               reduce using rule 11 (declaration_list_opt -> empty .)
    CHARACTER       reduce using rule 11 (declaration_list_opt -> empty .)
    CONST           reduce using rule 11 (declaration_list_opt -> empty .)
    FNUMBER         reduce using rule 11 (declaration_list_opt -> empty .)
    INUMBER         reduce using rule 11 (declaration_list_opt -> empty .)
    ID              reduce using rule 11 (declaration_list_opt -> empty .)
    STRING          reduce using rule 11 (declaration_list_opt -> empty .)


state 31

    (13) declaration_list -> declaration .
    EXTERN          reduce using rule 13 (declaration_list -> declaration .)
    VOID            reduce using rule 13 (declaration_list -> declaration .)
    CHAR            reduce using rule 13 (declaration_list -> declaration .)
    FLOAT           reduce using rule 13 (declaration_list -> declaration .)
    INT             reduce using rule 13 (declaration_list -> declaration .)
    }               reduce using rule 13 (declaration_list -> declaration .)
    FOR             reduce using rule 13 (declaration_list -> declaration .)
    WHILE           reduce using rule 13 (declaration_list -> declaration .)
    IF              reduce using rule 13 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 13 (declaration_list -> declaration .)
    BREAK           reduce using rule 13 (declaration_list -> declaration .)
    RETURN          reduce using rule 13 (declaration_list -> declaration .)
    {               reduce using rule 13 (declaration_list -> declaration .)
    &               reduce using rule 13 (declaration_list -> declaration .)
    *               reduce using rule 13 (declaration_list -> declaration .)
    !               reduce using rule 13 (declaration_list -> declaration .)
    +               reduce using rule 13 (declaration_list -> declaration .)
    -               reduce using rule 13 (declaration_list -> declaration .)
    (               reduce using rule 13 (declaration_list -> declaration .)
    CHARACTER       reduce using rule 13 (declaration_list -> declaration .)
    CONST           reduce using rule 13 (declaration_list -> declaration .)
    FNUMBER         reduce using rule 13 (declaration_list -> declaration .)
    INUMBER         reduce using rule 13 (declaration_list -> declaration .)
    ID              reduce using rule 13 (declaration_list -> declaration .)
    STRING          reduce using rule 13 (declaration_list -> declaration .)


state 32

    (9) declaration -> type_specifier . declarator ;
    (18) declarator -> . * declarator
    (19) declarator -> . direct_declarator
    (20) direct_declarator -> . direct_declarator ( )
    (21) direct_declarator -> . direct_declarator ( parameter_type_list )
    (22) direct_declarator -> . ID
    *               shift and go to state 16
    ID              shift and go to state 18

    declarator                     shift and go to state 77
    direct_declarator              shift and go to state 17

state 33

    (20) direct_declarator -> direct_declarator ( ) .
    (               reduce using rule 20 (direct_declarator -> direct_declarator ( ) .)
    ;               reduce using rule 20 (direct_declarator -> direct_declarator ( ) .)
    {               reduce using rule 20 (direct_declarator -> direct_declarator ( ) .)
    ,               reduce using rule 20 (direct_declarator -> direct_declarator ( ) .)
    )               reduce using rule 20 (direct_declarator -> direct_declarator ( ) .)


state 34

    (21) direct_declarator -> direct_declarator ( parameter_type_list . )
    )               shift and go to state 78


state 35

    (23) parameter_type_list -> parameter_list . , ELLIPSIS
    (24) parameter_type_list -> parameter_list .
    (25) parameter_list -> parameter_list . , parameter_declaration
    ,               shift and go to state 79
    )               reduce using rule 24 (parameter_type_list -> parameter_list .)


state 36

    (26) parameter_list -> parameter_declaration .
    ,               reduce using rule 26 (parameter_list -> parameter_declaration .)
    )               reduce using rule 26 (parameter_list -> parameter_declaration .)


state 37

    (27) parameter_declaration -> type_specifier . declarator
    (18) declarator -> . * declarator
    (19) declarator -> . direct_declarator
    (20) direct_declarator -> . direct_declarator ( )
    (21) direct_declarator -> . direct_declarator ( parameter_type_list )
    (22) direct_declarator -> . ID
    *               shift and go to state 16
    ID              shift and go to state 18

    declarator                     shift and go to state 80
    direct_declarator              shift and go to state 17

state 38

    (6) function_definition -> STATIC type_specifier declarator compound_statement .
    EXTERN          reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    STATIC          reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    VOID            reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    FLOAT           reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    INT             reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    $end            reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)


state 39

    (28) compound_statement -> { declaration_list_opt } .
    EXTERN          reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    STATIC          reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    VOID            reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    CHAR            reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    FLOAT           reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    INT             reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    $end            reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    }               reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    FOR             reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    WHILE           reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    IF              reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    CONTINUE        reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    BREAK           reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    RETURN          reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    {               reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    &               reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    *               reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    !               reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    +               reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    -               reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    (               reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    CHARACTER       reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    CONST           reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    FNUMBER         reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    INUMBER         reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    ID              reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    STRING          reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    ELSE            reduce using rule 28 (compound_statement -> { declaration_list_opt } .)


state 40

    (29) compound_statement -> { declaration_list_opt statement_list . }
    (101) statement_list -> statement_list . statement
    (83) statement -> . closed_statement
    (84) statement -> . open_statement
    (96) closed_statement -> . FOR ( for_cond ) closed_statement
    (97) closed_statement -> . WHILE ( expression ) closed_statement
    (98) closed_statement -> . IF ( expression ) closed
    (99) closed_statement -> . other_statement
    (88) open_statement -> . FOR ( for_cond ) open_statement
    (89) open_statement -> . IF ( expression ) open
    (90) open_statement -> . WHILE ( expression ) open_statement
    (91) open_statement -> . IF ( expression ) open_statement
    (92) open_statement -> . IF ( expression ) other_statement
    (85) other_statement -> . jumpstatement
    (86) other_statement -> . expression_statement
    (87) other_statement -> . compound_statement
    (79) jumpstatement -> . CONTINUE ;
    (80) jumpstatement -> . BREAK ;
    (81) jumpstatement -> . RETURN expression ;
    (82) jumpstatement -> . RETURN ;
    (30) expression_statement -> . expression ;
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    }               shift and go to state 81
    FOR             shift and go to state 44
    WHILE           shift and go to state 46
    IF              shift and go to state 48
    CONTINUE        shift and go to state 53
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    {               shift and go to state 23
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    statement                      shift and go to state 82
    closed_statement               shift and go to state 42
    open_statement                 shift and go to state 43
    expression                     shift and go to state 47
    other_statement                shift and go to state 49
    jumpstatement                  shift and go to state 50
    expression_statement           shift and go to state 51
    compound_statement             shift and go to state 52
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 41

    (102) statement_list -> statement .
    }               reduce using rule 102 (statement_list -> statement .)
    FOR             reduce using rule 102 (statement_list -> statement .)
    WHILE           reduce using rule 102 (statement_list -> statement .)
    IF              reduce using rule 102 (statement_list -> statement .)
    CONTINUE        reduce using rule 102 (statement_list -> statement .)
    BREAK           reduce using rule 102 (statement_list -> statement .)
    RETURN          reduce using rule 102 (statement_list -> statement .)
    {               reduce using rule 102 (statement_list -> statement .)
    &               reduce using rule 102 (statement_list -> statement .)
    *               reduce using rule 102 (statement_list -> statement .)
    !               reduce using rule 102 (statement_list -> statement .)
    +               reduce using rule 102 (statement_list -> statement .)
    -               reduce using rule 102 (statement_list -> statement .)
    (               reduce using rule 102 (statement_list -> statement .)
    CHARACTER       reduce using rule 102 (statement_list -> statement .)
    CONST           reduce using rule 102 (statement_list -> statement .)
    FNUMBER         reduce using rule 102 (statement_list -> statement .)
    INUMBER         reduce using rule 102 (statement_list -> statement .)
    ID              reduce using rule 102 (statement_list -> statement .)
    STRING          reduce using rule 102 (statement_list -> statement .)


state 42

    (83) statement -> closed_statement .
    }               reduce using rule 83 (statement -> closed_statement .)
    FOR             reduce using rule 83 (statement -> closed_statement .)
    WHILE           reduce using rule 83 (statement -> closed_statement .)
    IF              reduce using rule 83 (statement -> closed_statement .)
    CONTINUE        reduce using rule 83 (statement -> closed_statement .)
    BREAK           reduce using rule 83 (statement -> closed_statement .)
    RETURN          reduce using rule 83 (statement -> closed_statement .)
    {               reduce using rule 83 (statement -> closed_statement .)
    &               reduce using rule 83 (statement -> closed_statement .)
    *               reduce using rule 83 (statement -> closed_statement .)
    !               reduce using rule 83 (statement -> closed_statement .)
    +               reduce using rule 83 (statement -> closed_statement .)
    -               reduce using rule 83 (statement -> closed_statement .)
    (               reduce using rule 83 (statement -> closed_statement .)
    CHARACTER       reduce using rule 83 (statement -> closed_statement .)
    CONST           reduce using rule 83 (statement -> closed_statement .)
    FNUMBER         reduce using rule 83 (statement -> closed_statement .)
    INUMBER         reduce using rule 83 (statement -> closed_statement .)
    ID              reduce using rule 83 (statement -> closed_statement .)
    STRING          reduce using rule 83 (statement -> closed_statement .)


state 43

    (84) statement -> open_statement .
    }               reduce using rule 84 (statement -> open_statement .)
    FOR             reduce using rule 84 (statement -> open_statement .)
    WHILE           reduce using rule 84 (statement -> open_statement .)
    IF              reduce using rule 84 (statement -> open_statement .)
    CONTINUE        reduce using rule 84 (statement -> open_statement .)
    BREAK           reduce using rule 84 (statement -> open_statement .)
    RETURN          reduce using rule 84 (statement -> open_statement .)
    {               reduce using rule 84 (statement -> open_statement .)
    &               reduce using rule 84 (statement -> open_statement .)
    *               reduce using rule 84 (statement -> open_statement .)
    !               reduce using rule 84 (statement -> open_statement .)
    +               reduce using rule 84 (statement -> open_statement .)
    -               reduce using rule 84 (statement -> open_statement .)
    (               reduce using rule 84 (statement -> open_statement .)
    CHARACTER       reduce using rule 84 (statement -> open_statement .)
    CONST           reduce using rule 84 (statement -> open_statement .)
    FNUMBER         reduce using rule 84 (statement -> open_statement .)
    INUMBER         reduce using rule 84 (statement -> open_statement .)
    ID              reduce using rule 84 (statement -> open_statement .)
    STRING          reduce using rule 84 (statement -> open_statement .)


state 44

    (96) closed_statement -> FOR . ( for_cond ) closed_statement
    (88) open_statement -> FOR . ( for_cond ) open_statement
    (               shift and go to state 83


state 45

    (70) primary_expression -> ( . expression )
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    expression                     shift and go to state 84
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 46

    (97) closed_statement -> WHILE . ( expression ) closed_statement
    (90) open_statement -> WHILE . ( expression ) open_statement
    (               shift and go to state 85


state 47

    (30) expression_statement -> expression . ;
    ;               shift and go to state 86


state 48

    (98) closed_statement -> IF . ( expression ) closed
    (89) open_statement -> IF . ( expression ) open
    (91) open_statement -> IF . ( expression ) open_statement
    (92) open_statement -> IF . ( expression ) other_statement
    (               shift and go to state 87


state 49

    (99) closed_statement -> other_statement .
    }               reduce using rule 99 (closed_statement -> other_statement .)
    FOR             reduce using rule 99 (closed_statement -> other_statement .)
    WHILE           reduce using rule 99 (closed_statement -> other_statement .)
    IF              reduce using rule 99 (closed_statement -> other_statement .)
    CONTINUE        reduce using rule 99 (closed_statement -> other_statement .)
    BREAK           reduce using rule 99 (closed_statement -> other_statement .)
    RETURN          reduce using rule 99 (closed_statement -> other_statement .)
    {               reduce using rule 99 (closed_statement -> other_statement .)
    &               reduce using rule 99 (closed_statement -> other_statement .)
    *               reduce using rule 99 (closed_statement -> other_statement .)
    !               reduce using rule 99 (closed_statement -> other_statement .)
    +               reduce using rule 99 (closed_statement -> other_statement .)
    -               reduce using rule 99 (closed_statement -> other_statement .)
    (               reduce using rule 99 (closed_statement -> other_statement .)
    CHARACTER       reduce using rule 99 (closed_statement -> other_statement .)
    CONST           reduce using rule 99 (closed_statement -> other_statement .)
    FNUMBER         reduce using rule 99 (closed_statement -> other_statement .)
    INUMBER         reduce using rule 99 (closed_statement -> other_statement .)
    ID              reduce using rule 99 (closed_statement -> other_statement .)
    STRING          reduce using rule 99 (closed_statement -> other_statement .)
    ELSE            reduce using rule 99 (closed_statement -> other_statement .)


state 50

    (85) other_statement -> jumpstatement .
    }               reduce using rule 85 (other_statement -> jumpstatement .)
    FOR             reduce using rule 85 (other_statement -> jumpstatement .)
    WHILE           reduce using rule 85 (other_statement -> jumpstatement .)
    IF              reduce using rule 85 (other_statement -> jumpstatement .)
    CONTINUE        reduce using rule 85 (other_statement -> jumpstatement .)
    BREAK           reduce using rule 85 (other_statement -> jumpstatement .)
    RETURN          reduce using rule 85 (other_statement -> jumpstatement .)
    {               reduce using rule 85 (other_statement -> jumpstatement .)
    &               reduce using rule 85 (other_statement -> jumpstatement .)
    *               reduce using rule 85 (other_statement -> jumpstatement .)
    !               reduce using rule 85 (other_statement -> jumpstatement .)
    +               reduce using rule 85 (other_statement -> jumpstatement .)
    -               reduce using rule 85 (other_statement -> jumpstatement .)
    (               reduce using rule 85 (other_statement -> jumpstatement .)
    CHARACTER       reduce using rule 85 (other_statement -> jumpstatement .)
    CONST           reduce using rule 85 (other_statement -> jumpstatement .)
    FNUMBER         reduce using rule 85 (other_statement -> jumpstatement .)
    INUMBER         reduce using rule 85 (other_statement -> jumpstatement .)
    ID              reduce using rule 85 (other_statement -> jumpstatement .)
    STRING          reduce using rule 85 (other_statement -> jumpstatement .)
    ELSE            reduce using rule 85 (other_statement -> jumpstatement .)


state 51

    (86) other_statement -> expression_statement .
    }               reduce using rule 86 (other_statement -> expression_statement .)
    FOR             reduce using rule 86 (other_statement -> expression_statement .)
    WHILE           reduce using rule 86 (other_statement -> expression_statement .)
    IF              reduce using rule 86 (other_statement -> expression_statement .)
    CONTINUE        reduce using rule 86 (other_statement -> expression_statement .)
    BREAK           reduce using rule 86 (other_statement -> expression_statement .)
    RETURN          reduce using rule 86 (other_statement -> expression_statement .)
    {               reduce using rule 86 (other_statement -> expression_statement .)
    &               reduce using rule 86 (other_statement -> expression_statement .)
    *               reduce using rule 86 (other_statement -> expression_statement .)
    !               reduce using rule 86 (other_statement -> expression_statement .)
    +               reduce using rule 86 (other_statement -> expression_statement .)
    -               reduce using rule 86 (other_statement -> expression_statement .)
    (               reduce using rule 86 (other_statement -> expression_statement .)
    CHARACTER       reduce using rule 86 (other_statement -> expression_statement .)
    CONST           reduce using rule 86 (other_statement -> expression_statement .)
    FNUMBER         reduce using rule 86 (other_statement -> expression_statement .)
    INUMBER         reduce using rule 86 (other_statement -> expression_statement .)
    ID              reduce using rule 86 (other_statement -> expression_statement .)
    STRING          reduce using rule 86 (other_statement -> expression_statement .)
    ELSE            reduce using rule 86 (other_statement -> expression_statement .)


state 52

    (87) other_statement -> compound_statement .
    }               reduce using rule 87 (other_statement -> compound_statement .)
    FOR             reduce using rule 87 (other_statement -> compound_statement .)
    WHILE           reduce using rule 87 (other_statement -> compound_statement .)
    IF              reduce using rule 87 (other_statement -> compound_statement .)
    CONTINUE        reduce using rule 87 (other_statement -> compound_statement .)
    BREAK           reduce using rule 87 (other_statement -> compound_statement .)
    RETURN          reduce using rule 87 (other_statement -> compound_statement .)
    {               reduce using rule 87 (other_statement -> compound_statement .)
    &               reduce using rule 87 (other_statement -> compound_statement .)
    *               reduce using rule 87 (other_statement -> compound_statement .)
    !               reduce using rule 87 (other_statement -> compound_statement .)
    +               reduce using rule 87 (other_statement -> compound_statement .)
    -               reduce using rule 87 (other_statement -> compound_statement .)
    (               reduce using rule 87 (other_statement -> compound_statement .)
    CHARACTER       reduce using rule 87 (other_statement -> compound_statement .)
    CONST           reduce using rule 87 (other_statement -> compound_statement .)
    FNUMBER         reduce using rule 87 (other_statement -> compound_statement .)
    INUMBER         reduce using rule 87 (other_statement -> compound_statement .)
    ID              reduce using rule 87 (other_statement -> compound_statement .)
    STRING          reduce using rule 87 (other_statement -> compound_statement .)
    ELSE            reduce using rule 87 (other_statement -> compound_statement .)


state 53

    (79) jumpstatement -> CONTINUE . ;
    ;               shift and go to state 88


state 54

    (80) jumpstatement -> BREAK . ;
    ;               shift and go to state 89


state 55

    (81) jumpstatement -> RETURN . expression ;
    (82) jumpstatement -> RETURN . ;
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    ;               shift and go to state 91
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    expression                     shift and go to state 90
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 56

    (31) expression -> assigment_expression .
    ;               reduce using rule 31 (expression -> assigment_expression .)
    )               reduce using rule 31 (expression -> assigment_expression .)
    ]               reduce using rule 31 (expression -> assigment_expression .)
    ,               reduce using rule 31 (expression -> assigment_expression .)


state 57

    (32) expression -> equality_expression .
    (33) assigment_expression -> equality_expression . SUBEQ expression
    (34) assigment_expression -> equality_expression . MULEQ expression
    (35) assigment_expression -> equality_expression . DIVEQ expression
    (36) assigment_expression -> equality_expression . MODEQ expression
    (37) assigment_expression -> equality_expression . ADDEQ expression
    (38) assigment_expression -> equality_expression . = expression
    (39) equality_expression -> equality_expression . NE relational_expression
    (40) equality_expression -> equality_expression . EQ relational_expression
    ;               reduce using rule 32 (expression -> equality_expression .)
    )               reduce using rule 32 (expression -> equality_expression .)
    ]               reduce using rule 32 (expression -> equality_expression .)
    ,               reduce using rule 32 (expression -> equality_expression .)
    SUBEQ           shift and go to state 92
    MULEQ           shift and go to state 93
    DIVEQ           shift and go to state 94
    MODEQ           shift and go to state 95
    ADDEQ           shift and go to state 96
    =               shift and go to state 97
    NE              shift and go to state 98
    EQ              shift and go to state 99


state 58

    (41) equality_expression -> relational_expression .
    (42) relational_expression -> relational_expression . GE additive_expression
    (43) relational_expression -> relational_expression . LAND additive_expression
    (44) relational_expression -> relational_expression . LOR additive_expression
    (45) relational_expression -> relational_expression . > additive_expression
    (46) relational_expression -> relational_expression . LE additive_expression
    (47) relational_expression -> relational_expression . GT additive_expression
    (48) relational_expression -> relational_expression . LT additive_expression
    (49) relational_expression -> relational_expression . < additive_expression
    SUBEQ           reduce using rule 41 (equality_expression -> relational_expression .)
    MULEQ           reduce using rule 41 (equality_expression -> relational_expression .)
    DIVEQ           reduce using rule 41 (equality_expression -> relational_expression .)
    MODEQ           reduce using rule 41 (equality_expression -> relational_expression .)
    ADDEQ           reduce using rule 41 (equality_expression -> relational_expression .)
    =               reduce using rule 41 (equality_expression -> relational_expression .)
    NE              reduce using rule 41 (equality_expression -> relational_expression .)
    EQ              reduce using rule 41 (equality_expression -> relational_expression .)
    ;               reduce using rule 41 (equality_expression -> relational_expression .)
    )               reduce using rule 41 (equality_expression -> relational_expression .)
    ]               reduce using rule 41 (equality_expression -> relational_expression .)
    ,               reduce using rule 41 (equality_expression -> relational_expression .)
    GE              shift and go to state 100
    LAND            shift and go to state 101
    LOR             shift and go to state 102
    >               shift and go to state 103
    LE              shift and go to state 104
    GT              shift and go to state 105
    LT              shift and go to state 106
    <               shift and go to state 107


state 59

    (50) relational_expression -> additive_expression .
    (67) additive_expression -> additive_expression . - mult_expression
    (68) additive_expression -> additive_expression . + mult_expression
    GE              reduce using rule 50 (relational_expression -> additive_expression .)
    LAND            reduce using rule 50 (relational_expression -> additive_expression .)
    LOR             reduce using rule 50 (relational_expression -> additive_expression .)
    >               reduce using rule 50 (relational_expression -> additive_expression .)
    LE              reduce using rule 50 (relational_expression -> additive_expression .)
    GT              reduce using rule 50 (relational_expression -> additive_expression .)
    LT              reduce using rule 50 (relational_expression -> additive_expression .)
    <               reduce using rule 50 (relational_expression -> additive_expression .)
    SUBEQ           reduce using rule 50 (relational_expression -> additive_expression .)
    MULEQ           reduce using rule 50 (relational_expression -> additive_expression .)
    DIVEQ           reduce using rule 50 (relational_expression -> additive_expression .)
    MODEQ           reduce using rule 50 (relational_expression -> additive_expression .)
    ADDEQ           reduce using rule 50 (relational_expression -> additive_expression .)
    =               reduce using rule 50 (relational_expression -> additive_expression .)
    NE              reduce using rule 50 (relational_expression -> additive_expression .)
    EQ              reduce using rule 50 (relational_expression -> additive_expression .)
    ;               reduce using rule 50 (relational_expression -> additive_expression .)
    )               reduce using rule 50 (relational_expression -> additive_expression .)
    ]               reduce using rule 50 (relational_expression -> additive_expression .)
    ,               reduce using rule 50 (relational_expression -> additive_expression .)
    -               shift and go to state 108
    +               shift and go to state 109


state 60

    (61) unary_expression -> - . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    unary_expression               shift and go to state 110
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 61

    (69) additive_expression -> mult_expression .
    (63) mult_expression -> mult_expression . % unary_expression
    (64) mult_expression -> mult_expression . / unary_expression
    (65) mult_expression -> mult_expression . * unary_expression
    -               reduce using rule 69 (additive_expression -> mult_expression .)
    +               reduce using rule 69 (additive_expression -> mult_expression .)
    GE              reduce using rule 69 (additive_expression -> mult_expression .)
    LAND            reduce using rule 69 (additive_expression -> mult_expression .)
    LOR             reduce using rule 69 (additive_expression -> mult_expression .)
    >               reduce using rule 69 (additive_expression -> mult_expression .)
    LE              reduce using rule 69 (additive_expression -> mult_expression .)
    GT              reduce using rule 69 (additive_expression -> mult_expression .)
    LT              reduce using rule 69 (additive_expression -> mult_expression .)
    <               reduce using rule 69 (additive_expression -> mult_expression .)
    SUBEQ           reduce using rule 69 (additive_expression -> mult_expression .)
    MULEQ           reduce using rule 69 (additive_expression -> mult_expression .)
    DIVEQ           reduce using rule 69 (additive_expression -> mult_expression .)
    MODEQ           reduce using rule 69 (additive_expression -> mult_expression .)
    ADDEQ           reduce using rule 69 (additive_expression -> mult_expression .)
    =               reduce using rule 69 (additive_expression -> mult_expression .)
    NE              reduce using rule 69 (additive_expression -> mult_expression .)
    EQ              reduce using rule 69 (additive_expression -> mult_expression .)
    ;               reduce using rule 69 (additive_expression -> mult_expression .)
    )               reduce using rule 69 (additive_expression -> mult_expression .)
    ]               reduce using rule 69 (additive_expression -> mult_expression .)
    ,               reduce using rule 69 (additive_expression -> mult_expression .)
    %               shift and go to state 111
    /               shift and go to state 112
    *               shift and go to state 113


state 62

    (60) unary_expression -> + . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 63

    (66) mult_expression -> unary_expression .
    %               reduce using rule 66 (mult_expression -> unary_expression .)
    /               reduce using rule 66 (mult_expression -> unary_expression .)
    *               reduce using rule 66 (mult_expression -> unary_expression .)
    -               reduce using rule 66 (mult_expression -> unary_expression .)
    +               reduce using rule 66 (mult_expression -> unary_expression .)
    GE              reduce using rule 66 (mult_expression -> unary_expression .)
    LAND            reduce using rule 66 (mult_expression -> unary_expression .)
    LOR             reduce using rule 66 (mult_expression -> unary_expression .)
    >               reduce using rule 66 (mult_expression -> unary_expression .)
    LE              reduce using rule 66 (mult_expression -> unary_expression .)
    GT              reduce using rule 66 (mult_expression -> unary_expression .)
    LT              reduce using rule 66 (mult_expression -> unary_expression .)
    <               reduce using rule 66 (mult_expression -> unary_expression .)
    SUBEQ           reduce using rule 66 (mult_expression -> unary_expression .)
    MULEQ           reduce using rule 66 (mult_expression -> unary_expression .)
    DIVEQ           reduce using rule 66 (mult_expression -> unary_expression .)
    MODEQ           reduce using rule 66 (mult_expression -> unary_expression .)
    ADDEQ           reduce using rule 66 (mult_expression -> unary_expression .)
    =               reduce using rule 66 (mult_expression -> unary_expression .)
    NE              reduce using rule 66 (mult_expression -> unary_expression .)
    EQ              reduce using rule 66 (mult_expression -> unary_expression .)
    ;               reduce using rule 66 (mult_expression -> unary_expression .)
    )               reduce using rule 66 (mult_expression -> unary_expression .)
    ]               reduce using rule 66 (mult_expression -> unary_expression .)
    ,               reduce using rule 66 (mult_expression -> unary_expression .)


state 64

    (58) unary_expression -> * . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    unary_expression               shift and go to state 115
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 65

    (57) unary_expression -> & . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    unary_expression               shift and go to state 116
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 66

    (59) unary_expression -> ! . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    unary_expression               shift and go to state 117
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 67

    (62) unary_expression -> postfix_expression .
    (51) postfix_expression -> postfix_expression . [ expression ]
    (52) postfix_expression -> postfix_expression . ( )
    (53) postfix_expression -> postfix_expression . ( argument_expression_list )
    %               reduce using rule 62 (unary_expression -> postfix_expression .)
    /               reduce using rule 62 (unary_expression -> postfix_expression .)
    *               reduce using rule 62 (unary_expression -> postfix_expression .)
    -               reduce using rule 62 (unary_expression -> postfix_expression .)
    +               reduce using rule 62 (unary_expression -> postfix_expression .)
    GE              reduce using rule 62 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 62 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 62 (unary_expression -> postfix_expression .)
    >               reduce using rule 62 (unary_expression -> postfix_expression .)
    LE              reduce using rule 62 (unary_expression -> postfix_expression .)
    GT              reduce using rule 62 (unary_expression -> postfix_expression .)
    LT              reduce using rule 62 (unary_expression -> postfix_expression .)
    <               reduce using rule 62 (unary_expression -> postfix_expression .)
    SUBEQ           reduce using rule 62 (unary_expression -> postfix_expression .)
    MULEQ           reduce using rule 62 (unary_expression -> postfix_expression .)
    DIVEQ           reduce using rule 62 (unary_expression -> postfix_expression .)
    MODEQ           reduce using rule 62 (unary_expression -> postfix_expression .)
    ADDEQ           reduce using rule 62 (unary_expression -> postfix_expression .)
    =               reduce using rule 62 (unary_expression -> postfix_expression .)
    NE              reduce using rule 62 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 62 (unary_expression -> postfix_expression .)
    ;               reduce using rule 62 (unary_expression -> postfix_expression .)
    )               reduce using rule 62 (unary_expression -> postfix_expression .)
    ]               reduce using rule 62 (unary_expression -> postfix_expression .)
    ,               reduce using rule 62 (unary_expression -> postfix_expression .)
    [               shift and go to state 118
    (               shift and go to state 119


state 68

    (54) postfix_expression -> primary_expression .
    [               reduce using rule 54 (postfix_expression -> primary_expression .)
    (               reduce using rule 54 (postfix_expression -> primary_expression .)
    %               reduce using rule 54 (postfix_expression -> primary_expression .)
    /               reduce using rule 54 (postfix_expression -> primary_expression .)
    *               reduce using rule 54 (postfix_expression -> primary_expression .)
    -               reduce using rule 54 (postfix_expression -> primary_expression .)
    +               reduce using rule 54 (postfix_expression -> primary_expression .)
    GE              reduce using rule 54 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 54 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 54 (postfix_expression -> primary_expression .)
    >               reduce using rule 54 (postfix_expression -> primary_expression .)
    LE              reduce using rule 54 (postfix_expression -> primary_expression .)
    GT              reduce using rule 54 (postfix_expression -> primary_expression .)
    LT              reduce using rule 54 (postfix_expression -> primary_expression .)
    <               reduce using rule 54 (postfix_expression -> primary_expression .)
    SUBEQ           reduce using rule 54 (postfix_expression -> primary_expression .)
    MULEQ           reduce using rule 54 (postfix_expression -> primary_expression .)
    DIVEQ           reduce using rule 54 (postfix_expression -> primary_expression .)
    MODEQ           reduce using rule 54 (postfix_expression -> primary_expression .)
    ADDEQ           reduce using rule 54 (postfix_expression -> primary_expression .)
    =               reduce using rule 54 (postfix_expression -> primary_expression .)
    NE              reduce using rule 54 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 54 (postfix_expression -> primary_expression .)
    ;               reduce using rule 54 (postfix_expression -> primary_expression .)
    )               reduce using rule 54 (postfix_expression -> primary_expression .)
    ]               reduce using rule 54 (postfix_expression -> primary_expression .)
    ,               reduce using rule 54 (postfix_expression -> primary_expression .)


state 69

    (71) primary_expression -> string_literal .
    (77) string_literal -> string_literal . STRING
    [               reduce using rule 71 (primary_expression -> string_literal .)
    (               reduce using rule 71 (primary_expression -> string_literal .)
    %               reduce using rule 71 (primary_expression -> string_literal .)
    /               reduce using rule 71 (primary_expression -> string_literal .)
    *               reduce using rule 71 (primary_expression -> string_literal .)
    -               reduce using rule 71 (primary_expression -> string_literal .)
    +               reduce using rule 71 (primary_expression -> string_literal .)
    GE              reduce using rule 71 (primary_expression -> string_literal .)
    LAND            reduce using rule 71 (primary_expression -> string_literal .)
    LOR             reduce using rule 71 (primary_expression -> string_literal .)
    >               reduce using rule 71 (primary_expression -> string_literal .)
    LE              reduce using rule 71 (primary_expression -> string_literal .)
    GT              reduce using rule 71 (primary_expression -> string_literal .)
    LT              reduce using rule 71 (primary_expression -> string_literal .)
    <               reduce using rule 71 (primary_expression -> string_literal .)
    SUBEQ           reduce using rule 71 (primary_expression -> string_literal .)
    MULEQ           reduce using rule 71 (primary_expression -> string_literal .)
    DIVEQ           reduce using rule 71 (primary_expression -> string_literal .)
    MODEQ           reduce using rule 71 (primary_expression -> string_literal .)
    ADDEQ           reduce using rule 71 (primary_expression -> string_literal .)
    =               reduce using rule 71 (primary_expression -> string_literal .)
    NE              reduce using rule 71 (primary_expression -> string_literal .)
    EQ              reduce using rule 71 (primary_expression -> string_literal .)
    ;               reduce using rule 71 (primary_expression -> string_literal .)
    )               reduce using rule 71 (primary_expression -> string_literal .)
    ]               reduce using rule 71 (primary_expression -> string_literal .)
    ,               reduce using rule 71 (primary_expression -> string_literal .)
    STRING          shift and go to state 120


state 70

    (72) primary_expression -> CHARACTER .
    [               reduce using rule 72 (primary_expression -> CHARACTER .)
    (               reduce using rule 72 (primary_expression -> CHARACTER .)
    %               reduce using rule 72 (primary_expression -> CHARACTER .)
    /               reduce using rule 72 (primary_expression -> CHARACTER .)
    *               reduce using rule 72 (primary_expression -> CHARACTER .)
    -               reduce using rule 72 (primary_expression -> CHARACTER .)
    +               reduce using rule 72 (primary_expression -> CHARACTER .)
    GE              reduce using rule 72 (primary_expression -> CHARACTER .)
    LAND            reduce using rule 72 (primary_expression -> CHARACTER .)
    LOR             reduce using rule 72 (primary_expression -> CHARACTER .)
    >               reduce using rule 72 (primary_expression -> CHARACTER .)
    LE              reduce using rule 72 (primary_expression -> CHARACTER .)
    GT              reduce using rule 72 (primary_expression -> CHARACTER .)
    LT              reduce using rule 72 (primary_expression -> CHARACTER .)
    <               reduce using rule 72 (primary_expression -> CHARACTER .)
    SUBEQ           reduce using rule 72 (primary_expression -> CHARACTER .)
    MULEQ           reduce using rule 72 (primary_expression -> CHARACTER .)
    DIVEQ           reduce using rule 72 (primary_expression -> CHARACTER .)
    MODEQ           reduce using rule 72 (primary_expression -> CHARACTER .)
    ADDEQ           reduce using rule 72 (primary_expression -> CHARACTER .)
    =               reduce using rule 72 (primary_expression -> CHARACTER .)
    NE              reduce using rule 72 (primary_expression -> CHARACTER .)
    EQ              reduce using rule 72 (primary_expression -> CHARACTER .)
    ;               reduce using rule 72 (primary_expression -> CHARACTER .)
    )               reduce using rule 72 (primary_expression -> CHARACTER .)
    ]               reduce using rule 72 (primary_expression -> CHARACTER .)
    ,               reduce using rule 72 (primary_expression -> CHARACTER .)


state 71

    (73) primary_expression -> CONST .
    [               reduce using rule 73 (primary_expression -> CONST .)
    (               reduce using rule 73 (primary_expression -> CONST .)
    %               reduce using rule 73 (primary_expression -> CONST .)
    /               reduce using rule 73 (primary_expression -> CONST .)
    *               reduce using rule 73 (primary_expression -> CONST .)
    -               reduce using rule 73 (primary_expression -> CONST .)
    +               reduce using rule 73 (primary_expression -> CONST .)
    GE              reduce using rule 73 (primary_expression -> CONST .)
    LAND            reduce using rule 73 (primary_expression -> CONST .)
    LOR             reduce using rule 73 (primary_expression -> CONST .)
    >               reduce using rule 73 (primary_expression -> CONST .)
    LE              reduce using rule 73 (primary_expression -> CONST .)
    GT              reduce using rule 73 (primary_expression -> CONST .)
    LT              reduce using rule 73 (primary_expression -> CONST .)
    <               reduce using rule 73 (primary_expression -> CONST .)
    SUBEQ           reduce using rule 73 (primary_expression -> CONST .)
    MULEQ           reduce using rule 73 (primary_expression -> CONST .)
    DIVEQ           reduce using rule 73 (primary_expression -> CONST .)
    MODEQ           reduce using rule 73 (primary_expression -> CONST .)
    ADDEQ           reduce using rule 73 (primary_expression -> CONST .)
    =               reduce using rule 73 (primary_expression -> CONST .)
    NE              reduce using rule 73 (primary_expression -> CONST .)
    EQ              reduce using rule 73 (primary_expression -> CONST .)
    ;               reduce using rule 73 (primary_expression -> CONST .)
    )               reduce using rule 73 (primary_expression -> CONST .)
    ]               reduce using rule 73 (primary_expression -> CONST .)
    ,               reduce using rule 73 (primary_expression -> CONST .)


state 72

    (74) primary_expression -> FNUMBER .
    [               reduce using rule 74 (primary_expression -> FNUMBER .)
    (               reduce using rule 74 (primary_expression -> FNUMBER .)
    %               reduce using rule 74 (primary_expression -> FNUMBER .)
    /               reduce using rule 74 (primary_expression -> FNUMBER .)
    *               reduce using rule 74 (primary_expression -> FNUMBER .)
    -               reduce using rule 74 (primary_expression -> FNUMBER .)
    +               reduce using rule 74 (primary_expression -> FNUMBER .)
    GE              reduce using rule 74 (primary_expression -> FNUMBER .)
    LAND            reduce using rule 74 (primary_expression -> FNUMBER .)
    LOR             reduce using rule 74 (primary_expression -> FNUMBER .)
    >               reduce using rule 74 (primary_expression -> FNUMBER .)
    LE              reduce using rule 74 (primary_expression -> FNUMBER .)
    GT              reduce using rule 74 (primary_expression -> FNUMBER .)
    LT              reduce using rule 74 (primary_expression -> FNUMBER .)
    <               reduce using rule 74 (primary_expression -> FNUMBER .)
    SUBEQ           reduce using rule 74 (primary_expression -> FNUMBER .)
    MULEQ           reduce using rule 74 (primary_expression -> FNUMBER .)
    DIVEQ           reduce using rule 74 (primary_expression -> FNUMBER .)
    MODEQ           reduce using rule 74 (primary_expression -> FNUMBER .)
    ADDEQ           reduce using rule 74 (primary_expression -> FNUMBER .)
    =               reduce using rule 74 (primary_expression -> FNUMBER .)
    NE              reduce using rule 74 (primary_expression -> FNUMBER .)
    EQ              reduce using rule 74 (primary_expression -> FNUMBER .)
    ;               reduce using rule 74 (primary_expression -> FNUMBER .)
    )               reduce using rule 74 (primary_expression -> FNUMBER .)
    ]               reduce using rule 74 (primary_expression -> FNUMBER .)
    ,               reduce using rule 74 (primary_expression -> FNUMBER .)


state 73

    (75) primary_expression -> INUMBER .
    [               reduce using rule 75 (primary_expression -> INUMBER .)
    (               reduce using rule 75 (primary_expression -> INUMBER .)
    %               reduce using rule 75 (primary_expression -> INUMBER .)
    /               reduce using rule 75 (primary_expression -> INUMBER .)
    *               reduce using rule 75 (primary_expression -> INUMBER .)
    -               reduce using rule 75 (primary_expression -> INUMBER .)
    +               reduce using rule 75 (primary_expression -> INUMBER .)
    GE              reduce using rule 75 (primary_expression -> INUMBER .)
    LAND            reduce using rule 75 (primary_expression -> INUMBER .)
    LOR             reduce using rule 75 (primary_expression -> INUMBER .)
    >               reduce using rule 75 (primary_expression -> INUMBER .)
    LE              reduce using rule 75 (primary_expression -> INUMBER .)
    GT              reduce using rule 75 (primary_expression -> INUMBER .)
    LT              reduce using rule 75 (primary_expression -> INUMBER .)
    <               reduce using rule 75 (primary_expression -> INUMBER .)
    SUBEQ           reduce using rule 75 (primary_expression -> INUMBER .)
    MULEQ           reduce using rule 75 (primary_expression -> INUMBER .)
    DIVEQ           reduce using rule 75 (primary_expression -> INUMBER .)
    MODEQ           reduce using rule 75 (primary_expression -> INUMBER .)
    ADDEQ           reduce using rule 75 (primary_expression -> INUMBER .)
    =               reduce using rule 75 (primary_expression -> INUMBER .)
    NE              reduce using rule 75 (primary_expression -> INUMBER .)
    EQ              reduce using rule 75 (primary_expression -> INUMBER .)
    ;               reduce using rule 75 (primary_expression -> INUMBER .)
    )               reduce using rule 75 (primary_expression -> INUMBER .)
    ]               reduce using rule 75 (primary_expression -> INUMBER .)
    ,               reduce using rule 75 (primary_expression -> INUMBER .)


state 74

    (76) primary_expression -> ID .
    [               reduce using rule 76 (primary_expression -> ID .)
    (               reduce using rule 76 (primary_expression -> ID .)
    %               reduce using rule 76 (primary_expression -> ID .)
    /               reduce using rule 76 (primary_expression -> ID .)
    *               reduce using rule 76 (primary_expression -> ID .)
    -               reduce using rule 76 (primary_expression -> ID .)
    +               reduce using rule 76 (primary_expression -> ID .)
    GE              reduce using rule 76 (primary_expression -> ID .)
    LAND            reduce using rule 76 (primary_expression -> ID .)
    LOR             reduce using rule 76 (primary_expression -> ID .)
    >               reduce using rule 76 (primary_expression -> ID .)
    LE              reduce using rule 76 (primary_expression -> ID .)
    GT              reduce using rule 76 (primary_expression -> ID .)
    LT              reduce using rule 76 (primary_expression -> ID .)
    <               reduce using rule 76 (primary_expression -> ID .)
    SUBEQ           reduce using rule 76 (primary_expression -> ID .)
    MULEQ           reduce using rule 76 (primary_expression -> ID .)
    DIVEQ           reduce using rule 76 (primary_expression -> ID .)
    MODEQ           reduce using rule 76 (primary_expression -> ID .)
    ADDEQ           reduce using rule 76 (primary_expression -> ID .)
    =               reduce using rule 76 (primary_expression -> ID .)
    NE              reduce using rule 76 (primary_expression -> ID .)
    EQ              reduce using rule 76 (primary_expression -> ID .)
    ;               reduce using rule 76 (primary_expression -> ID .)
    )               reduce using rule 76 (primary_expression -> ID .)
    ]               reduce using rule 76 (primary_expression -> ID .)
    ,               reduce using rule 76 (primary_expression -> ID .)


state 75

    (78) string_literal -> STRING .
    STRING          reduce using rule 78 (string_literal -> STRING .)
    [               reduce using rule 78 (string_literal -> STRING .)
    (               reduce using rule 78 (string_literal -> STRING .)
    %               reduce using rule 78 (string_literal -> STRING .)
    /               reduce using rule 78 (string_literal -> STRING .)
    *               reduce using rule 78 (string_literal -> STRING .)
    -               reduce using rule 78 (string_literal -> STRING .)
    +               reduce using rule 78 (string_literal -> STRING .)
    GE              reduce using rule 78 (string_literal -> STRING .)
    LAND            reduce using rule 78 (string_literal -> STRING .)
    LOR             reduce using rule 78 (string_literal -> STRING .)
    >               reduce using rule 78 (string_literal -> STRING .)
    LE              reduce using rule 78 (string_literal -> STRING .)
    GT              reduce using rule 78 (string_literal -> STRING .)
    LT              reduce using rule 78 (string_literal -> STRING .)
    <               reduce using rule 78 (string_literal -> STRING .)
    SUBEQ           reduce using rule 78 (string_literal -> STRING .)
    MULEQ           reduce using rule 78 (string_literal -> STRING .)
    DIVEQ           reduce using rule 78 (string_literal -> STRING .)
    MODEQ           reduce using rule 78 (string_literal -> STRING .)
    ADDEQ           reduce using rule 78 (string_literal -> STRING .)
    =               reduce using rule 78 (string_literal -> STRING .)
    NE              reduce using rule 78 (string_literal -> STRING .)
    EQ              reduce using rule 78 (string_literal -> STRING .)
    ;               reduce using rule 78 (string_literal -> STRING .)
    )               reduce using rule 78 (string_literal -> STRING .)
    ]               reduce using rule 78 (string_literal -> STRING .)
    ,               reduce using rule 78 (string_literal -> STRING .)


state 76

    (12) declaration_list -> declaration_list declaration .
    EXTERN          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 12 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 12 (declaration_list -> declaration_list declaration .)
    }               reduce using rule 12 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 12 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 12 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    {               reduce using rule 12 (declaration_list -> declaration_list declaration .)
    &               reduce using rule 12 (declaration_list -> declaration_list declaration .)
    *               reduce using rule 12 (declaration_list -> declaration_list declaration .)
    !               reduce using rule 12 (declaration_list -> declaration_list declaration .)
    +               reduce using rule 12 (declaration_list -> declaration_list declaration .)
    -               reduce using rule 12 (declaration_list -> declaration_list declaration .)
    (               reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CHARACTER       reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    FNUMBER         reduce using rule 12 (declaration_list -> declaration_list declaration .)
    INUMBER         reduce using rule 12 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 12 (declaration_list -> declaration_list declaration .)
    STRING          reduce using rule 12 (declaration_list -> declaration_list declaration .)


state 77

    (9) declaration -> type_specifier declarator . ;
    ;               shift and go to state 21


state 78

    (21) direct_declarator -> direct_declarator ( parameter_type_list ) .
    (               reduce using rule 21 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ;               reduce using rule 21 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    {               reduce using rule 21 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ,               reduce using rule 21 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    )               reduce using rule 21 (direct_declarator -> direct_declarator ( parameter_type_list ) .)


state 79

    (23) parameter_type_list -> parameter_list , . ELLIPSIS
    (25) parameter_list -> parameter_list , . parameter_declaration
    (27) parameter_declaration -> . type_specifier declarator
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . FLOAT
    (17) type_specifier -> . INT
    ELLIPSIS        shift and go to state 121
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    parameter_declaration          shift and go to state 122
    type_specifier                 shift and go to state 37

state 80

    (27) parameter_declaration -> type_specifier declarator .
    ,               reduce using rule 27 (parameter_declaration -> type_specifier declarator .)
    )               reduce using rule 27 (parameter_declaration -> type_specifier declarator .)


state 81

    (29) compound_statement -> { declaration_list_opt statement_list } .
    EXTERN          reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    STATIC          reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    VOID            reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    CHAR            reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    FLOAT           reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    INT             reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    $end            reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    }               reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    FOR             reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    WHILE           reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    IF              reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    CONTINUE        reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    BREAK           reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    RETURN          reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    {               reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    &               reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    *               reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    !               reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    +               reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    -               reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    (               reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    CHARACTER       reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    CONST           reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    FNUMBER         reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    INUMBER         reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    ID              reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    STRING          reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    ELSE            reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)


state 82

    (101) statement_list -> statement_list statement .
    }               reduce using rule 101 (statement_list -> statement_list statement .)
    FOR             reduce using rule 101 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 101 (statement_list -> statement_list statement .)
    IF              reduce using rule 101 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 101 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 101 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 101 (statement_list -> statement_list statement .)
    {               reduce using rule 101 (statement_list -> statement_list statement .)
    &               reduce using rule 101 (statement_list -> statement_list statement .)
    *               reduce using rule 101 (statement_list -> statement_list statement .)
    !               reduce using rule 101 (statement_list -> statement_list statement .)
    +               reduce using rule 101 (statement_list -> statement_list statement .)
    -               reduce using rule 101 (statement_list -> statement_list statement .)
    (               reduce using rule 101 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 101 (statement_list -> statement_list statement .)
    CONST           reduce using rule 101 (statement_list -> statement_list statement .)
    FNUMBER         reduce using rule 101 (statement_list -> statement_list statement .)
    INUMBER         reduce using rule 101 (statement_list -> statement_list statement .)
    ID              reduce using rule 101 (statement_list -> statement_list statement .)
    STRING          reduce using rule 101 (statement_list -> statement_list statement .)


state 83

    (96) closed_statement -> FOR ( . for_cond ) closed_statement
    (88) open_statement -> FOR ( . for_cond ) open_statement
    (94) for_cond -> . expression_statement double_expression
    (30) expression_statement -> . expression ;
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    for_cond                       shift and go to state 123
    expression_statement           shift and go to state 124
    expression                     shift and go to state 47
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 84

    (70) primary_expression -> ( expression . )
    )               shift and go to state 125


state 85

    (97) closed_statement -> WHILE ( . expression ) closed_statement
    (90) open_statement -> WHILE ( . expression ) open_statement
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    expression                     shift and go to state 126
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 86

    (30) expression_statement -> expression ; .
    }               reduce using rule 30 (expression_statement -> expression ; .)
    FOR             reduce using rule 30 (expression_statement -> expression ; .)
    WHILE           reduce using rule 30 (expression_statement -> expression ; .)
    IF              reduce using rule 30 (expression_statement -> expression ; .)
    CONTINUE        reduce using rule 30 (expression_statement -> expression ; .)
    BREAK           reduce using rule 30 (expression_statement -> expression ; .)
    RETURN          reduce using rule 30 (expression_statement -> expression ; .)
    {               reduce using rule 30 (expression_statement -> expression ; .)
    &               reduce using rule 30 (expression_statement -> expression ; .)
    *               reduce using rule 30 (expression_statement -> expression ; .)
    !               reduce using rule 30 (expression_statement -> expression ; .)
    +               reduce using rule 30 (expression_statement -> expression ; .)
    -               reduce using rule 30 (expression_statement -> expression ; .)
    (               reduce using rule 30 (expression_statement -> expression ; .)
    CHARACTER       reduce using rule 30 (expression_statement -> expression ; .)
    CONST           reduce using rule 30 (expression_statement -> expression ; .)
    FNUMBER         reduce using rule 30 (expression_statement -> expression ; .)
    INUMBER         reduce using rule 30 (expression_statement -> expression ; .)
    ID              reduce using rule 30 (expression_statement -> expression ; .)
    STRING          reduce using rule 30 (expression_statement -> expression ; .)
    ELSE            reduce using rule 30 (expression_statement -> expression ; .)


state 87

    (98) closed_statement -> IF ( . expression ) closed
    (89) open_statement -> IF ( . expression ) open
    (91) open_statement -> IF ( . expression ) open_statement
    (92) open_statement -> IF ( . expression ) other_statement
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    expression                     shift and go to state 127
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 88

    (79) jumpstatement -> CONTINUE ; .
    }               reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    FOR             reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    WHILE           reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    IF              reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    CONTINUE        reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    BREAK           reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    RETURN          reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    {               reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    &               reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    *               reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    !               reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    +               reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    -               reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    (               reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    CHARACTER       reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    CONST           reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    FNUMBER         reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    INUMBER         reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    ID              reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    STRING          reduce using rule 79 (jumpstatement -> CONTINUE ; .)
    ELSE            reduce using rule 79 (jumpstatement -> CONTINUE ; .)


state 89

    (80) jumpstatement -> BREAK ; .
    }               reduce using rule 80 (jumpstatement -> BREAK ; .)
    FOR             reduce using rule 80 (jumpstatement -> BREAK ; .)
    WHILE           reduce using rule 80 (jumpstatement -> BREAK ; .)
    IF              reduce using rule 80 (jumpstatement -> BREAK ; .)
    CONTINUE        reduce using rule 80 (jumpstatement -> BREAK ; .)
    BREAK           reduce using rule 80 (jumpstatement -> BREAK ; .)
    RETURN          reduce using rule 80 (jumpstatement -> BREAK ; .)
    {               reduce using rule 80 (jumpstatement -> BREAK ; .)
    &               reduce using rule 80 (jumpstatement -> BREAK ; .)
    *               reduce using rule 80 (jumpstatement -> BREAK ; .)
    !               reduce using rule 80 (jumpstatement -> BREAK ; .)
    +               reduce using rule 80 (jumpstatement -> BREAK ; .)
    -               reduce using rule 80 (jumpstatement -> BREAK ; .)
    (               reduce using rule 80 (jumpstatement -> BREAK ; .)
    CHARACTER       reduce using rule 80 (jumpstatement -> BREAK ; .)
    CONST           reduce using rule 80 (jumpstatement -> BREAK ; .)
    FNUMBER         reduce using rule 80 (jumpstatement -> BREAK ; .)
    INUMBER         reduce using rule 80 (jumpstatement -> BREAK ; .)
    ID              reduce using rule 80 (jumpstatement -> BREAK ; .)
    STRING          reduce using rule 80 (jumpstatement -> BREAK ; .)
    ELSE            reduce using rule 80 (jumpstatement -> BREAK ; .)


state 90

    (81) jumpstatement -> RETURN expression . ;
    ;               shift and go to state 128


state 91

    (82) jumpstatement -> RETURN ; .
    }               reduce using rule 82 (jumpstatement -> RETURN ; .)
    FOR             reduce using rule 82 (jumpstatement -> RETURN ; .)
    WHILE           reduce using rule 82 (jumpstatement -> RETURN ; .)
    IF              reduce using rule 82 (jumpstatement -> RETURN ; .)
    CONTINUE        reduce using rule 82 (jumpstatement -> RETURN ; .)
    BREAK           reduce using rule 82 (jumpstatement -> RETURN ; .)
    RETURN          reduce using rule 82 (jumpstatement -> RETURN ; .)
    {               reduce using rule 82 (jumpstatement -> RETURN ; .)
    &               reduce using rule 82 (jumpstatement -> RETURN ; .)
    *               reduce using rule 82 (jumpstatement -> RETURN ; .)
    !               reduce using rule 82 (jumpstatement -> RETURN ; .)
    +               reduce using rule 82 (jumpstatement -> RETURN ; .)
    -               reduce using rule 82 (jumpstatement -> RETURN ; .)
    (               reduce using rule 82 (jumpstatement -> RETURN ; .)
    CHARACTER       reduce using rule 82 (jumpstatement -> RETURN ; .)
    CONST           reduce using rule 82 (jumpstatement -> RETURN ; .)
    FNUMBER         reduce using rule 82 (jumpstatement -> RETURN ; .)
    INUMBER         reduce using rule 82 (jumpstatement -> RETURN ; .)
    ID              reduce using rule 82 (jumpstatement -> RETURN ; .)
    STRING          reduce using rule 82 (jumpstatement -> RETURN ; .)
    ELSE            reduce using rule 82 (jumpstatement -> RETURN ; .)


state 92

    (33) assigment_expression -> equality_expression SUBEQ . expression
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    equality_expression            shift and go to state 57
    expression                     shift and go to state 129
    assigment_expression           shift and go to state 56
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 93

    (34) assigment_expression -> equality_expression MULEQ . expression
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    equality_expression            shift and go to state 57
    expression                     shift and go to state 130
    assigment_expression           shift and go to state 56
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 94

    (35) assigment_expression -> equality_expression DIVEQ . expression
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    equality_expression            shift and go to state 57
    expression                     shift and go to state 131
    assigment_expression           shift and go to state 56
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 95

    (36) assigment_expression -> equality_expression MODEQ . expression
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    equality_expression            shift and go to state 57
    expression                     shift and go to state 132
    assigment_expression           shift and go to state 56
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 96

    (37) assigment_expression -> equality_expression ADDEQ . expression
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    equality_expression            shift and go to state 57
    expression                     shift and go to state 133
    assigment_expression           shift and go to state 56
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 97

    (38) assigment_expression -> equality_expression = . expression
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    equality_expression            shift and go to state 57
    expression                     shift and go to state 134
    assigment_expression           shift and go to state 56
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 98

    (39) equality_expression -> equality_expression NE . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    relational_expression          shift and go to state 135
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 99

    (40) equality_expression -> equality_expression EQ . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    relational_expression          shift and go to state 136
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 100

    (42) relational_expression -> relational_expression GE . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    additive_expression            shift and go to state 137
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 101

    (43) relational_expression -> relational_expression LAND . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    additive_expression            shift and go to state 138
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 102

    (44) relational_expression -> relational_expression LOR . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    additive_expression            shift and go to state 139
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 103

    (45) relational_expression -> relational_expression > . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    additive_expression            shift and go to state 140
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 104

    (46) relational_expression -> relational_expression LE . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    additive_expression            shift and go to state 141
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 105

    (47) relational_expression -> relational_expression GT . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    additive_expression            shift and go to state 142
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 106

    (48) relational_expression -> relational_expression LT . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    additive_expression            shift and go to state 143
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 107

    (49) relational_expression -> relational_expression < . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    additive_expression            shift and go to state 144
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 108

    (67) additive_expression -> additive_expression - . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    mult_expression                shift and go to state 145
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 109

    (68) additive_expression -> additive_expression + . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    mult_expression                shift and go to state 146
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 110

    (61) unary_expression -> - unary_expression .
    %               reduce using rule 61 (unary_expression -> - unary_expression .)
    /               reduce using rule 61 (unary_expression -> - unary_expression .)
    *               reduce using rule 61 (unary_expression -> - unary_expression .)
    -               reduce using rule 61 (unary_expression -> - unary_expression .)
    +               reduce using rule 61 (unary_expression -> - unary_expression .)
    GE              reduce using rule 61 (unary_expression -> - unary_expression .)
    LAND            reduce using rule 61 (unary_expression -> - unary_expression .)
    LOR             reduce using rule 61 (unary_expression -> - unary_expression .)
    >               reduce using rule 61 (unary_expression -> - unary_expression .)
    LE              reduce using rule 61 (unary_expression -> - unary_expression .)
    GT              reduce using rule 61 (unary_expression -> - unary_expression .)
    LT              reduce using rule 61 (unary_expression -> - unary_expression .)
    <               reduce using rule 61 (unary_expression -> - unary_expression .)
    SUBEQ           reduce using rule 61 (unary_expression -> - unary_expression .)
    MULEQ           reduce using rule 61 (unary_expression -> - unary_expression .)
    DIVEQ           reduce using rule 61 (unary_expression -> - unary_expression .)
    MODEQ           reduce using rule 61 (unary_expression -> - unary_expression .)
    ADDEQ           reduce using rule 61 (unary_expression -> - unary_expression .)
    =               reduce using rule 61 (unary_expression -> - unary_expression .)
    NE              reduce using rule 61 (unary_expression -> - unary_expression .)
    EQ              reduce using rule 61 (unary_expression -> - unary_expression .)
    ;               reduce using rule 61 (unary_expression -> - unary_expression .)
    )               reduce using rule 61 (unary_expression -> - unary_expression .)
    ]               reduce using rule 61 (unary_expression -> - unary_expression .)
    ,               reduce using rule 61 (unary_expression -> - unary_expression .)


state 111

    (63) mult_expression -> mult_expression % . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    unary_expression               shift and go to state 147
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 112

    (64) mult_expression -> mult_expression / . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    unary_expression               shift and go to state 148
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 113

    (65) mult_expression -> mult_expression * . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 114

    (60) unary_expression -> + unary_expression .
    %               reduce using rule 60 (unary_expression -> + unary_expression .)
    /               reduce using rule 60 (unary_expression -> + unary_expression .)
    *               reduce using rule 60 (unary_expression -> + unary_expression .)
    -               reduce using rule 60 (unary_expression -> + unary_expression .)
    +               reduce using rule 60 (unary_expression -> + unary_expression .)
    GE              reduce using rule 60 (unary_expression -> + unary_expression .)
    LAND            reduce using rule 60 (unary_expression -> + unary_expression .)
    LOR             reduce using rule 60 (unary_expression -> + unary_expression .)
    >               reduce using rule 60 (unary_expression -> + unary_expression .)
    LE              reduce using rule 60 (unary_expression -> + unary_expression .)
    GT              reduce using rule 60 (unary_expression -> + unary_expression .)
    LT              reduce using rule 60 (unary_expression -> + unary_expression .)
    <               reduce using rule 60 (unary_expression -> + unary_expression .)
    SUBEQ           reduce using rule 60 (unary_expression -> + unary_expression .)
    MULEQ           reduce using rule 60 (unary_expression -> + unary_expression .)
    DIVEQ           reduce using rule 60 (unary_expression -> + unary_expression .)
    MODEQ           reduce using rule 60 (unary_expression -> + unary_expression .)
    ADDEQ           reduce using rule 60 (unary_expression -> + unary_expression .)
    =               reduce using rule 60 (unary_expression -> + unary_expression .)
    NE              reduce using rule 60 (unary_expression -> + unary_expression .)
    EQ              reduce using rule 60 (unary_expression -> + unary_expression .)
    ;               reduce using rule 60 (unary_expression -> + unary_expression .)
    )               reduce using rule 60 (unary_expression -> + unary_expression .)
    ]               reduce using rule 60 (unary_expression -> + unary_expression .)
    ,               reduce using rule 60 (unary_expression -> + unary_expression .)


state 115

    (58) unary_expression -> * unary_expression .
    %               reduce using rule 58 (unary_expression -> * unary_expression .)
    /               reduce using rule 58 (unary_expression -> * unary_expression .)
    *               reduce using rule 58 (unary_expression -> * unary_expression .)
    -               reduce using rule 58 (unary_expression -> * unary_expression .)
    +               reduce using rule 58 (unary_expression -> * unary_expression .)
    GE              reduce using rule 58 (unary_expression -> * unary_expression .)
    LAND            reduce using rule 58 (unary_expression -> * unary_expression .)
    LOR             reduce using rule 58 (unary_expression -> * unary_expression .)
    >               reduce using rule 58 (unary_expression -> * unary_expression .)
    LE              reduce using rule 58 (unary_expression -> * unary_expression .)
    GT              reduce using rule 58 (unary_expression -> * unary_expression .)
    LT              reduce using rule 58 (unary_expression -> * unary_expression .)
    <               reduce using rule 58 (unary_expression -> * unary_expression .)
    SUBEQ           reduce using rule 58 (unary_expression -> * unary_expression .)
    MULEQ           reduce using rule 58 (unary_expression -> * unary_expression .)
    DIVEQ           reduce using rule 58 (unary_expression -> * unary_expression .)
    MODEQ           reduce using rule 58 (unary_expression -> * unary_expression .)
    ADDEQ           reduce using rule 58 (unary_expression -> * unary_expression .)
    =               reduce using rule 58 (unary_expression -> * unary_expression .)
    NE              reduce using rule 58 (unary_expression -> * unary_expression .)
    EQ              reduce using rule 58 (unary_expression -> * unary_expression .)
    ;               reduce using rule 58 (unary_expression -> * unary_expression .)
    )               reduce using rule 58 (unary_expression -> * unary_expression .)
    ]               reduce using rule 58 (unary_expression -> * unary_expression .)
    ,               reduce using rule 58 (unary_expression -> * unary_expression .)


state 116

    (57) unary_expression -> & unary_expression .
    %               reduce using rule 57 (unary_expression -> & unary_expression .)
    /               reduce using rule 57 (unary_expression -> & unary_expression .)
    *               reduce using rule 57 (unary_expression -> & unary_expression .)
    -               reduce using rule 57 (unary_expression -> & unary_expression .)
    +               reduce using rule 57 (unary_expression -> & unary_expression .)
    GE              reduce using rule 57 (unary_expression -> & unary_expression .)
    LAND            reduce using rule 57 (unary_expression -> & unary_expression .)
    LOR             reduce using rule 57 (unary_expression -> & unary_expression .)
    >               reduce using rule 57 (unary_expression -> & unary_expression .)
    LE              reduce using rule 57 (unary_expression -> & unary_expression .)
    GT              reduce using rule 57 (unary_expression -> & unary_expression .)
    LT              reduce using rule 57 (unary_expression -> & unary_expression .)
    <               reduce using rule 57 (unary_expression -> & unary_expression .)
    SUBEQ           reduce using rule 57 (unary_expression -> & unary_expression .)
    MULEQ           reduce using rule 57 (unary_expression -> & unary_expression .)
    DIVEQ           reduce using rule 57 (unary_expression -> & unary_expression .)
    MODEQ           reduce using rule 57 (unary_expression -> & unary_expression .)
    ADDEQ           reduce using rule 57 (unary_expression -> & unary_expression .)
    =               reduce using rule 57 (unary_expression -> & unary_expression .)
    NE              reduce using rule 57 (unary_expression -> & unary_expression .)
    EQ              reduce using rule 57 (unary_expression -> & unary_expression .)
    ;               reduce using rule 57 (unary_expression -> & unary_expression .)
    )               reduce using rule 57 (unary_expression -> & unary_expression .)
    ]               reduce using rule 57 (unary_expression -> & unary_expression .)
    ,               reduce using rule 57 (unary_expression -> & unary_expression .)


state 117

    (59) unary_expression -> ! unary_expression .
    %               reduce using rule 59 (unary_expression -> ! unary_expression .)
    /               reduce using rule 59 (unary_expression -> ! unary_expression .)
    *               reduce using rule 59 (unary_expression -> ! unary_expression .)
    -               reduce using rule 59 (unary_expression -> ! unary_expression .)
    +               reduce using rule 59 (unary_expression -> ! unary_expression .)
    GE              reduce using rule 59 (unary_expression -> ! unary_expression .)
    LAND            reduce using rule 59 (unary_expression -> ! unary_expression .)
    LOR             reduce using rule 59 (unary_expression -> ! unary_expression .)
    >               reduce using rule 59 (unary_expression -> ! unary_expression .)
    LE              reduce using rule 59 (unary_expression -> ! unary_expression .)
    GT              reduce using rule 59 (unary_expression -> ! unary_expression .)
    LT              reduce using rule 59 (unary_expression -> ! unary_expression .)
    <               reduce using rule 59 (unary_expression -> ! unary_expression .)
    SUBEQ           reduce using rule 59 (unary_expression -> ! unary_expression .)
    MULEQ           reduce using rule 59 (unary_expression -> ! unary_expression .)
    DIVEQ           reduce using rule 59 (unary_expression -> ! unary_expression .)
    MODEQ           reduce using rule 59 (unary_expression -> ! unary_expression .)
    ADDEQ           reduce using rule 59 (unary_expression -> ! unary_expression .)
    =               reduce using rule 59 (unary_expression -> ! unary_expression .)
    NE              reduce using rule 59 (unary_expression -> ! unary_expression .)
    EQ              reduce using rule 59 (unary_expression -> ! unary_expression .)
    ;               reduce using rule 59 (unary_expression -> ! unary_expression .)
    )               reduce using rule 59 (unary_expression -> ! unary_expression .)
    ]               reduce using rule 59 (unary_expression -> ! unary_expression .)
    ,               reduce using rule 59 (unary_expression -> ! unary_expression .)


state 118

    (51) postfix_expression -> postfix_expression [ . expression ]
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    postfix_expression             shift and go to state 67
    expression                     shift and go to state 150
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 119

    (52) postfix_expression -> postfix_expression ( . )
    (53) postfix_expression -> postfix_expression ( . argument_expression_list )
    (55) argument_expression_list -> . argument_expression_list , expression
    (56) argument_expression_list -> . expression
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    )               shift and go to state 151
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    postfix_expression             shift and go to state 67
    argument_expression_list       shift and go to state 152
    expression                     shift and go to state 153
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 120

    (77) string_literal -> string_literal STRING .
    STRING          reduce using rule 77 (string_literal -> string_literal STRING .)
    [               reduce using rule 77 (string_literal -> string_literal STRING .)
    (               reduce using rule 77 (string_literal -> string_literal STRING .)
    %               reduce using rule 77 (string_literal -> string_literal STRING .)
    /               reduce using rule 77 (string_literal -> string_literal STRING .)
    *               reduce using rule 77 (string_literal -> string_literal STRING .)
    -               reduce using rule 77 (string_literal -> string_literal STRING .)
    +               reduce using rule 77 (string_literal -> string_literal STRING .)
    GE              reduce using rule 77 (string_literal -> string_literal STRING .)
    LAND            reduce using rule 77 (string_literal -> string_literal STRING .)
    LOR             reduce using rule 77 (string_literal -> string_literal STRING .)
    >               reduce using rule 77 (string_literal -> string_literal STRING .)
    LE              reduce using rule 77 (string_literal -> string_literal STRING .)
    GT              reduce using rule 77 (string_literal -> string_literal STRING .)
    LT              reduce using rule 77 (string_literal -> string_literal STRING .)
    <               reduce using rule 77 (string_literal -> string_literal STRING .)
    SUBEQ           reduce using rule 77 (string_literal -> string_literal STRING .)
    MULEQ           reduce using rule 77 (string_literal -> string_literal STRING .)
    DIVEQ           reduce using rule 77 (string_literal -> string_literal STRING .)
    MODEQ           reduce using rule 77 (string_literal -> string_literal STRING .)
    ADDEQ           reduce using rule 77 (string_literal -> string_literal STRING .)
    =               reduce using rule 77 (string_literal -> string_literal STRING .)
    NE              reduce using rule 77 (string_literal -> string_literal STRING .)
    EQ              reduce using rule 77 (string_literal -> string_literal STRING .)
    ;               reduce using rule 77 (string_literal -> string_literal STRING .)
    )               reduce using rule 77 (string_literal -> string_literal STRING .)
    ]               reduce using rule 77 (string_literal -> string_literal STRING .)
    ,               reduce using rule 77 (string_literal -> string_literal STRING .)


state 121

    (23) parameter_type_list -> parameter_list , ELLIPSIS .
    )               reduce using rule 23 (parameter_type_list -> parameter_list , ELLIPSIS .)


state 122

    (25) parameter_list -> parameter_list , parameter_declaration .
    ,               reduce using rule 25 (parameter_list -> parameter_list , parameter_declaration .)
    )               reduce using rule 25 (parameter_list -> parameter_list , parameter_declaration .)


state 123

    (96) closed_statement -> FOR ( for_cond . ) closed_statement
    (88) open_statement -> FOR ( for_cond . ) open_statement
    )               shift and go to state 154


state 124

    (94) for_cond -> expression_statement . double_expression
    (95) double_expression -> . expression_statement expression
    (30) expression_statement -> . expression ;
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    expression_statement           shift and go to state 155
    double_expression              shift and go to state 156
    expression                     shift and go to state 47
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 125

    (70) primary_expression -> ( expression ) .
    [               reduce using rule 70 (primary_expression -> ( expression ) .)
    (               reduce using rule 70 (primary_expression -> ( expression ) .)
    %               reduce using rule 70 (primary_expression -> ( expression ) .)
    /               reduce using rule 70 (primary_expression -> ( expression ) .)
    *               reduce using rule 70 (primary_expression -> ( expression ) .)
    -               reduce using rule 70 (primary_expression -> ( expression ) .)
    +               reduce using rule 70 (primary_expression -> ( expression ) .)
    GE              reduce using rule 70 (primary_expression -> ( expression ) .)
    LAND            reduce using rule 70 (primary_expression -> ( expression ) .)
    LOR             reduce using rule 70 (primary_expression -> ( expression ) .)
    >               reduce using rule 70 (primary_expression -> ( expression ) .)
    LE              reduce using rule 70 (primary_expression -> ( expression ) .)
    GT              reduce using rule 70 (primary_expression -> ( expression ) .)
    LT              reduce using rule 70 (primary_expression -> ( expression ) .)
    <               reduce using rule 70 (primary_expression -> ( expression ) .)
    SUBEQ           reduce using rule 70 (primary_expression -> ( expression ) .)
    MULEQ           reduce using rule 70 (primary_expression -> ( expression ) .)
    DIVEQ           reduce using rule 70 (primary_expression -> ( expression ) .)
    MODEQ           reduce using rule 70 (primary_expression -> ( expression ) .)
    ADDEQ           reduce using rule 70 (primary_expression -> ( expression ) .)
    =               reduce using rule 70 (primary_expression -> ( expression ) .)
    NE              reduce using rule 70 (primary_expression -> ( expression ) .)
    EQ              reduce using rule 70 (primary_expression -> ( expression ) .)
    ;               reduce using rule 70 (primary_expression -> ( expression ) .)
    )               reduce using rule 70 (primary_expression -> ( expression ) .)
    ]               reduce using rule 70 (primary_expression -> ( expression ) .)
    ,               reduce using rule 70 (primary_expression -> ( expression ) .)


state 126

    (97) closed_statement -> WHILE ( expression . ) closed_statement
    (90) open_statement -> WHILE ( expression . ) open_statement
    )               shift and go to state 157


state 127

    (98) closed_statement -> IF ( expression . ) closed
    (89) open_statement -> IF ( expression . ) open
    (91) open_statement -> IF ( expression . ) open_statement
    (92) open_statement -> IF ( expression . ) other_statement
    )               shift and go to state 158


state 128

    (81) jumpstatement -> RETURN expression ; .
    }               reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    FOR             reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    WHILE           reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    IF              reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    CONTINUE        reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    BREAK           reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    RETURN          reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    {               reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    &               reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    *               reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    !               reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    +               reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    -               reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    (               reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    CHARACTER       reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    CONST           reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    FNUMBER         reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    INUMBER         reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    ID              reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    STRING          reduce using rule 81 (jumpstatement -> RETURN expression ; .)
    ELSE            reduce using rule 81 (jumpstatement -> RETURN expression ; .)


state 129

    (33) assigment_expression -> equality_expression SUBEQ expression .
    ;               reduce using rule 33 (assigment_expression -> equality_expression SUBEQ expression .)
    )               reduce using rule 33 (assigment_expression -> equality_expression SUBEQ expression .)
    ]               reduce using rule 33 (assigment_expression -> equality_expression SUBEQ expression .)
    ,               reduce using rule 33 (assigment_expression -> equality_expression SUBEQ expression .)


state 130

    (34) assigment_expression -> equality_expression MULEQ expression .
    ;               reduce using rule 34 (assigment_expression -> equality_expression MULEQ expression .)
    )               reduce using rule 34 (assigment_expression -> equality_expression MULEQ expression .)
    ]               reduce using rule 34 (assigment_expression -> equality_expression MULEQ expression .)
    ,               reduce using rule 34 (assigment_expression -> equality_expression MULEQ expression .)


state 131

    (35) assigment_expression -> equality_expression DIVEQ expression .
    ;               reduce using rule 35 (assigment_expression -> equality_expression DIVEQ expression .)
    )               reduce using rule 35 (assigment_expression -> equality_expression DIVEQ expression .)
    ]               reduce using rule 35 (assigment_expression -> equality_expression DIVEQ expression .)
    ,               reduce using rule 35 (assigment_expression -> equality_expression DIVEQ expression .)


state 132

    (36) assigment_expression -> equality_expression MODEQ expression .
    ;               reduce using rule 36 (assigment_expression -> equality_expression MODEQ expression .)
    )               reduce using rule 36 (assigment_expression -> equality_expression MODEQ expression .)
    ]               reduce using rule 36 (assigment_expression -> equality_expression MODEQ expression .)
    ,               reduce using rule 36 (assigment_expression -> equality_expression MODEQ expression .)


state 133

    (37) assigment_expression -> equality_expression ADDEQ expression .
    ;               reduce using rule 37 (assigment_expression -> equality_expression ADDEQ expression .)
    )               reduce using rule 37 (assigment_expression -> equality_expression ADDEQ expression .)
    ]               reduce using rule 37 (assigment_expression -> equality_expression ADDEQ expression .)
    ,               reduce using rule 37 (assigment_expression -> equality_expression ADDEQ expression .)


state 134

    (38) assigment_expression -> equality_expression = expression .
    ;               reduce using rule 38 (assigment_expression -> equality_expression = expression .)
    )               reduce using rule 38 (assigment_expression -> equality_expression = expression .)
    ]               reduce using rule 38 (assigment_expression -> equality_expression = expression .)
    ,               reduce using rule 38 (assigment_expression -> equality_expression = expression .)


state 135

    (39) equality_expression -> equality_expression NE relational_expression .
    (42) relational_expression -> relational_expression . GE additive_expression
    (43) relational_expression -> relational_expression . LAND additive_expression
    (44) relational_expression -> relational_expression . LOR additive_expression
    (45) relational_expression -> relational_expression . > additive_expression
    (46) relational_expression -> relational_expression . LE additive_expression
    (47) relational_expression -> relational_expression . GT additive_expression
    (48) relational_expression -> relational_expression . LT additive_expression
    (49) relational_expression -> relational_expression . < additive_expression
    SUBEQ           reduce using rule 39 (equality_expression -> equality_expression NE relational_expression .)
    MULEQ           reduce using rule 39 (equality_expression -> equality_expression NE relational_expression .)
    DIVEQ           reduce using rule 39 (equality_expression -> equality_expression NE relational_expression .)
    MODEQ           reduce using rule 39 (equality_expression -> equality_expression NE relational_expression .)
    ADDEQ           reduce using rule 39 (equality_expression -> equality_expression NE relational_expression .)
    =               reduce using rule 39 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 39 (equality_expression -> equality_expression NE relational_expression .)
    EQ              reduce using rule 39 (equality_expression -> equality_expression NE relational_expression .)
    ;               reduce using rule 39 (equality_expression -> equality_expression NE relational_expression .)
    )               reduce using rule 39 (equality_expression -> equality_expression NE relational_expression .)
    ]               reduce using rule 39 (equality_expression -> equality_expression NE relational_expression .)
    ,               reduce using rule 39 (equality_expression -> equality_expression NE relational_expression .)
    GE              shift and go to state 100
    LAND            shift and go to state 101
    LOR             shift and go to state 102
    >               shift and go to state 103
    LE              shift and go to state 104
    GT              shift and go to state 105
    LT              shift and go to state 106
    <               shift and go to state 107


state 136

    (40) equality_expression -> equality_expression EQ relational_expression .
    (42) relational_expression -> relational_expression . GE additive_expression
    (43) relational_expression -> relational_expression . LAND additive_expression
    (44) relational_expression -> relational_expression . LOR additive_expression
    (45) relational_expression -> relational_expression . > additive_expression
    (46) relational_expression -> relational_expression . LE additive_expression
    (47) relational_expression -> relational_expression . GT additive_expression
    (48) relational_expression -> relational_expression . LT additive_expression
    (49) relational_expression -> relational_expression . < additive_expression
    SUBEQ           reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    MULEQ           reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    DIVEQ           reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    MODEQ           reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    ADDEQ           reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    =               reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    EQ              reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    ;               reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    )               reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    ]               reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    ,               reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    GE              shift and go to state 100
    LAND            shift and go to state 101
    LOR             shift and go to state 102
    >               shift and go to state 103
    LE              shift and go to state 104
    GT              shift and go to state 105
    LT              shift and go to state 106
    <               shift and go to state 107


state 137

    (42) relational_expression -> relational_expression GE additive_expression .
    (67) additive_expression -> additive_expression . - mult_expression
    (68) additive_expression -> additive_expression . + mult_expression
    GE              reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    LAND            reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    LOR             reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    >               reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    LE              reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    GT              reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    LT              reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    <               reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    SUBEQ           reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    MULEQ           reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    DIVEQ           reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    MODEQ           reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    ADDEQ           reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    =               reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    NE              reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    EQ              reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    ;               reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    )               reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    ]               reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    ,               reduce using rule 42 (relational_expression -> relational_expression GE additive_expression .)
    -               shift and go to state 108
    +               shift and go to state 109


state 138

    (43) relational_expression -> relational_expression LAND additive_expression .
    (67) additive_expression -> additive_expression . - mult_expression
    (68) additive_expression -> additive_expression . + mult_expression
    GE              reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    LAND            reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    LOR             reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    >               reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    LE              reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    GT              reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    LT              reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    <               reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    SUBEQ           reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    MULEQ           reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    DIVEQ           reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    MODEQ           reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    ADDEQ           reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    =               reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    NE              reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    EQ              reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    ;               reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    )               reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    ]               reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    ,               reduce using rule 43 (relational_expression -> relational_expression LAND additive_expression .)
    -               shift and go to state 108
    +               shift and go to state 109


state 139

    (44) relational_expression -> relational_expression LOR additive_expression .
    (67) additive_expression -> additive_expression . - mult_expression
    (68) additive_expression -> additive_expression . + mult_expression
    GE              reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    LAND            reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    LOR             reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    >               reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    LE              reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    GT              reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    LT              reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    <               reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    SUBEQ           reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    MULEQ           reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    DIVEQ           reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    MODEQ           reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    ADDEQ           reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    =               reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    NE              reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    EQ              reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    ;               reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    )               reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    ]               reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    ,               reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    -               shift and go to state 108
    +               shift and go to state 109


state 140

    (45) relational_expression -> relational_expression > additive_expression .
    (67) additive_expression -> additive_expression . - mult_expression
    (68) additive_expression -> additive_expression . + mult_expression
    GE              reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    LAND            reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    LOR             reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    >               reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    LE              reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    GT              reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    LT              reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    <               reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    SUBEQ           reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    MULEQ           reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    DIVEQ           reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    MODEQ           reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    ADDEQ           reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    =               reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    NE              reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    EQ              reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    ;               reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    )               reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    ]               reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    ,               reduce using rule 45 (relational_expression -> relational_expression > additive_expression .)
    -               shift and go to state 108
    +               shift and go to state 109


state 141

    (46) relational_expression -> relational_expression LE additive_expression .
    (67) additive_expression -> additive_expression . - mult_expression
    (68) additive_expression -> additive_expression . + mult_expression
    GE              reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    LAND            reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    LOR             reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    >               reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    LE              reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    GT              reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    LT              reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    <               reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    SUBEQ           reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    MULEQ           reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    DIVEQ           reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    MODEQ           reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    ADDEQ           reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    =               reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    NE              reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    EQ              reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    ;               reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    )               reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    ]               reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    ,               reduce using rule 46 (relational_expression -> relational_expression LE additive_expression .)
    -               shift and go to state 108
    +               shift and go to state 109


state 142

    (47) relational_expression -> relational_expression GT additive_expression .
    (67) additive_expression -> additive_expression . - mult_expression
    (68) additive_expression -> additive_expression . + mult_expression
    GE              reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    LAND            reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    LOR             reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    >               reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    LE              reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    GT              reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    LT              reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    <               reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    SUBEQ           reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    MULEQ           reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    DIVEQ           reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    MODEQ           reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    ADDEQ           reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    =               reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    NE              reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    EQ              reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    ;               reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    )               reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    ]               reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    ,               reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    -               shift and go to state 108
    +               shift and go to state 109


state 143

    (48) relational_expression -> relational_expression LT additive_expression .
    (67) additive_expression -> additive_expression . - mult_expression
    (68) additive_expression -> additive_expression . + mult_expression
    GE              reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    LAND            reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    LOR             reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    >               reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    LE              reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    GT              reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    LT              reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    <               reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    SUBEQ           reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    MULEQ           reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    DIVEQ           reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    MODEQ           reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    ADDEQ           reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    =               reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    NE              reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    EQ              reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    ;               reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    )               reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    ]               reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    ,               reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    -               shift and go to state 108
    +               shift and go to state 109


state 144

    (49) relational_expression -> relational_expression < additive_expression .
    (67) additive_expression -> additive_expression . - mult_expression
    (68) additive_expression -> additive_expression . + mult_expression
    GE              reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    LAND            reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    LOR             reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    >               reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    LE              reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    GT              reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    LT              reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    <               reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    SUBEQ           reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    MULEQ           reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    DIVEQ           reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    MODEQ           reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    ADDEQ           reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    =               reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    NE              reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    EQ              reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    ;               reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    )               reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    ]               reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    ,               reduce using rule 49 (relational_expression -> relational_expression < additive_expression .)
    -               shift and go to state 108
    +               shift and go to state 109


state 145

    (67) additive_expression -> additive_expression - mult_expression .
    (63) mult_expression -> mult_expression . % unary_expression
    (64) mult_expression -> mult_expression . / unary_expression
    (65) mult_expression -> mult_expression . * unary_expression
    -               reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    +               reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    GE              reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    LAND            reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    LOR             reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    >               reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    LE              reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    GT              reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    LT              reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    <               reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    SUBEQ           reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    MULEQ           reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    DIVEQ           reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    MODEQ           reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    ADDEQ           reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    =               reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    NE              reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    EQ              reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    ;               reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    )               reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    ]               reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    ,               reduce using rule 67 (additive_expression -> additive_expression - mult_expression .)
    %               shift and go to state 111
    /               shift and go to state 112
    *               shift and go to state 113


state 146

    (68) additive_expression -> additive_expression + mult_expression .
    (63) mult_expression -> mult_expression . % unary_expression
    (64) mult_expression -> mult_expression . / unary_expression
    (65) mult_expression -> mult_expression . * unary_expression
    -               reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    +               reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    GE              reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    LAND            reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    LOR             reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    >               reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    LE              reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    GT              reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    LT              reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    <               reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    SUBEQ           reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    MULEQ           reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    DIVEQ           reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    MODEQ           reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    ADDEQ           reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    =               reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    NE              reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    EQ              reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    ;               reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    )               reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    ]               reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    ,               reduce using rule 68 (additive_expression -> additive_expression + mult_expression .)
    %               shift and go to state 111
    /               shift and go to state 112
    *               shift and go to state 113


state 147

    (63) mult_expression -> mult_expression % unary_expression .
    %               reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    /               reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    *               reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    -               reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    +               reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    GE              reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    LAND            reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    LOR             reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    >               reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    LE              reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    GT              reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    LT              reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    <               reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    SUBEQ           reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    MULEQ           reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    DIVEQ           reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    MODEQ           reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    ADDEQ           reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    =               reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    NE              reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    EQ              reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    ;               reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    )               reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    ]               reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)
    ,               reduce using rule 63 (mult_expression -> mult_expression % unary_expression .)


state 148

    (64) mult_expression -> mult_expression / unary_expression .
    %               reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    /               reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    *               reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    -               reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    +               reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    GE              reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    LAND            reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    LOR             reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    >               reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    LE              reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    GT              reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    LT              reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    <               reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    SUBEQ           reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    MULEQ           reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    DIVEQ           reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    MODEQ           reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    ADDEQ           reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    =               reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    NE              reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    EQ              reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    ;               reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    )               reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    ]               reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)
    ,               reduce using rule 64 (mult_expression -> mult_expression / unary_expression .)


state 149

    (65) mult_expression -> mult_expression * unary_expression .
    %               reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    /               reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    *               reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    -               reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    +               reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    GE              reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    LAND            reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    LOR             reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    >               reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    LE              reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    GT              reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    LT              reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    <               reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    SUBEQ           reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    MULEQ           reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    DIVEQ           reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    MODEQ           reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    ADDEQ           reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    =               reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    NE              reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    EQ              reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    ;               reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    )               reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    ]               reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)
    ,               reduce using rule 65 (mult_expression -> mult_expression * unary_expression .)


state 150

    (51) postfix_expression -> postfix_expression [ expression . ]
    ]               shift and go to state 159


state 151

    (52) postfix_expression -> postfix_expression ( ) .
    [               reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    (               reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    %               reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    /               reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    *               reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    -               reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    +               reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    GE              reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    LAND            reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    LOR             reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    >               reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    LE              reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    GT              reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    LT              reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    <               reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    SUBEQ           reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    MULEQ           reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    DIVEQ           reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    MODEQ           reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    ADDEQ           reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    =               reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    NE              reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    EQ              reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    ;               reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    )               reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    ]               reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)
    ,               reduce using rule 52 (postfix_expression -> postfix_expression ( ) .)


state 152

    (53) postfix_expression -> postfix_expression ( argument_expression_list . )
    (55) argument_expression_list -> argument_expression_list . , expression
    )               shift and go to state 160
    ,               shift and go to state 161


state 153

    (56) argument_expression_list -> expression .
    )               reduce using rule 56 (argument_expression_list -> expression .)
    ,               reduce using rule 56 (argument_expression_list -> expression .)


state 154

    (96) closed_statement -> FOR ( for_cond ) . closed_statement
    (88) open_statement -> FOR ( for_cond ) . open_statement
    (96) closed_statement -> . FOR ( for_cond ) closed_statement
    (97) closed_statement -> . WHILE ( expression ) closed_statement
    (98) closed_statement -> . IF ( expression ) closed
    (99) closed_statement -> . other_statement
    (88) open_statement -> . FOR ( for_cond ) open_statement
    (89) open_statement -> . IF ( expression ) open
    (90) open_statement -> . WHILE ( expression ) open_statement
    (91) open_statement -> . IF ( expression ) open_statement
    (92) open_statement -> . IF ( expression ) other_statement
    (85) other_statement -> . jumpstatement
    (86) other_statement -> . expression_statement
    (87) other_statement -> . compound_statement
    (79) jumpstatement -> . CONTINUE ;
    (80) jumpstatement -> . BREAK ;
    (81) jumpstatement -> . RETURN expression ;
    (82) jumpstatement -> . RETURN ;
    (30) expression_statement -> . expression ;
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    FOR             shift and go to state 44
    WHILE           shift and go to state 46
    IF              shift and go to state 48
    CONTINUE        shift and go to state 53
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    {               shift and go to state 23
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    closed_statement               shift and go to state 162
    open_statement                 shift and go to state 163
    expression                     shift and go to state 47
    other_statement                shift and go to state 49
    jumpstatement                  shift and go to state 50
    expression_statement           shift and go to state 51
    compound_statement             shift and go to state 52
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 155

    (95) double_expression -> expression_statement . expression
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    expression                     shift and go to state 164
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 156

    (94) for_cond -> expression_statement double_expression .
    )               reduce using rule 94 (for_cond -> expression_statement double_expression .)


state 157

    (97) closed_statement -> WHILE ( expression ) . closed_statement
    (90) open_statement -> WHILE ( expression ) . open_statement
    (96) closed_statement -> . FOR ( for_cond ) closed_statement
    (97) closed_statement -> . WHILE ( expression ) closed_statement
    (98) closed_statement -> . IF ( expression ) closed
    (99) closed_statement -> . other_statement
    (88) open_statement -> . FOR ( for_cond ) open_statement
    (89) open_statement -> . IF ( expression ) open
    (90) open_statement -> . WHILE ( expression ) open_statement
    (91) open_statement -> . IF ( expression ) open_statement
    (92) open_statement -> . IF ( expression ) other_statement
    (85) other_statement -> . jumpstatement
    (86) other_statement -> . expression_statement
    (87) other_statement -> . compound_statement
    (79) jumpstatement -> . CONTINUE ;
    (80) jumpstatement -> . BREAK ;
    (81) jumpstatement -> . RETURN expression ;
    (82) jumpstatement -> . RETURN ;
    (30) expression_statement -> . expression ;
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    FOR             shift and go to state 44
    WHILE           shift and go to state 46
    IF              shift and go to state 48
    CONTINUE        shift and go to state 53
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    {               shift and go to state 23
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    expression                     shift and go to state 47
    closed_statement               shift and go to state 165
    open_statement                 shift and go to state 166
    other_statement                shift and go to state 49
    jumpstatement                  shift and go to state 50
    expression_statement           shift and go to state 51
    compound_statement             shift and go to state 52
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 158

    (98) closed_statement -> IF ( expression ) . closed
    (89) open_statement -> IF ( expression ) . open
    (91) open_statement -> IF ( expression ) . open_statement
    (92) open_statement -> IF ( expression ) . other_statement
    (100) closed -> . closed_statement ELSE closed_statement
    (93) open -> . closed_statement ELSE open_statement
    (88) open_statement -> . FOR ( for_cond ) open_statement
    (89) open_statement -> . IF ( expression ) open
    (90) open_statement -> . WHILE ( expression ) open_statement
    (91) open_statement -> . IF ( expression ) open_statement
    (92) open_statement -> . IF ( expression ) other_statement
    (85) other_statement -> . jumpstatement
    (86) other_statement -> . expression_statement
    (87) other_statement -> . compound_statement
    (96) closed_statement -> . FOR ( for_cond ) closed_statement
    (97) closed_statement -> . WHILE ( expression ) closed_statement
    (98) closed_statement -> . IF ( expression ) closed
    (99) closed_statement -> . other_statement
    (79) jumpstatement -> . CONTINUE ;
    (80) jumpstatement -> . BREAK ;
    (81) jumpstatement -> . RETURN expression ;
    (82) jumpstatement -> . RETURN ;
    (30) expression_statement -> . expression ;
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    FOR             shift and go to state 173
    IF              shift and go to state 167
    WHILE           shift and go to state 174
    CONTINUE        shift and go to state 53
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    {               shift and go to state 23
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    expression                     shift and go to state 47
    closed                         shift and go to state 168
    open                           shift and go to state 169
    open_statement                 shift and go to state 170
    other_statement                shift and go to state 171
    closed_statement               shift and go to state 172
    jumpstatement                  shift and go to state 50
    expression_statement           shift and go to state 51
    compound_statement             shift and go to state 52
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 159

    (51) postfix_expression -> postfix_expression [ expression ] .
    [               reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    (               reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    %               reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    /               reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    *               reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    -               reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    +               reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    GE              reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    LAND            reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    LOR             reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    >               reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    LE              reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    GT              reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    LT              reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    <               reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    SUBEQ           reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    MULEQ           reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    DIVEQ           reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    MODEQ           reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    ADDEQ           reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    =               reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    NE              reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    EQ              reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    ;               reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    )               reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    ]               reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)
    ,               reduce using rule 51 (postfix_expression -> postfix_expression [ expression ] .)


state 160

    (53) postfix_expression -> postfix_expression ( argument_expression_list ) .
    [               reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    (               reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    %               reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    /               reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    *               reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    -               reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    +               reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    GE              reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LAND            reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LOR             reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    >               reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LE              reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    GT              reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LT              reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    <               reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    SUBEQ           reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MULEQ           reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    DIVEQ           reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MODEQ           reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ADDEQ           reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    =               reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    NE              reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    EQ              reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ;               reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    )               reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ]               reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ,               reduce using rule 53 (postfix_expression -> postfix_expression ( argument_expression_list ) .)


state 161

    (55) argument_expression_list -> argument_expression_list , . expression
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    expression                     shift and go to state 175
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 162

    (96) closed_statement -> FOR ( for_cond ) closed_statement .
    }               reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    FOR             reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    WHILE           reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    IF              reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    CONTINUE        reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    BREAK           reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    RETURN          reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    {               reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    &               reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    *               reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    !               reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    +               reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    -               reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    (               reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    CHARACTER       reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    CONST           reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    FNUMBER         reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    INUMBER         reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    ID              reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    STRING          reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)
    ELSE            reduce using rule 96 (closed_statement -> FOR ( for_cond ) closed_statement .)


state 163

    (88) open_statement -> FOR ( for_cond ) open_statement .
    }               reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    FOR             reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    WHILE           reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    IF              reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    CONTINUE        reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    BREAK           reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    RETURN          reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    {               reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    &               reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    *               reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    !               reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    +               reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    -               reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    (               reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    CHARACTER       reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    CONST           reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    FNUMBER         reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    INUMBER         reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    ID              reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)
    STRING          reduce using rule 88 (open_statement -> FOR ( for_cond ) open_statement .)


state 164

    (95) double_expression -> expression_statement expression .
    )               reduce using rule 95 (double_expression -> expression_statement expression .)


state 165

    (97) closed_statement -> WHILE ( expression ) closed_statement .
    }               reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    FOR             reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    WHILE           reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    IF              reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    CONTINUE        reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    BREAK           reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    RETURN          reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    {               reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    &               reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    *               reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    !               reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    +               reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    -               reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    (               reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    CHARACTER       reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    CONST           reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    FNUMBER         reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    INUMBER         reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    ID              reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    STRING          reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)
    ELSE            reduce using rule 97 (closed_statement -> WHILE ( expression ) closed_statement .)


state 166

    (90) open_statement -> WHILE ( expression ) open_statement .
    }               reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    FOR             reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    WHILE           reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    IF              reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    CONTINUE        reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    BREAK           reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    RETURN          reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    {               reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    &               reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    *               reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    !               reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    +               reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    -               reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    (               reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    CHARACTER       reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    CONST           reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    FNUMBER         reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    INUMBER         reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    ID              reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)
    STRING          reduce using rule 90 (open_statement -> WHILE ( expression ) open_statement .)


state 167

    (89) open_statement -> IF . ( expression ) open
    (91) open_statement -> IF . ( expression ) open_statement
    (92) open_statement -> IF . ( expression ) other_statement
    (98) closed_statement -> IF . ( expression ) closed
    (               shift and go to state 176


state 168

    (98) closed_statement -> IF ( expression ) closed .
    }               reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    FOR             reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    WHILE           reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    IF              reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    CONTINUE        reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    BREAK           reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    RETURN          reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    {               reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    &               reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    *               reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    !               reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    +               reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    -               reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    (               reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    CHARACTER       reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    CONST           reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    FNUMBER         reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    INUMBER         reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    ID              reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    STRING          reduce using rule 98 (closed_statement -> IF ( expression ) closed .)
    ELSE            reduce using rule 98 (closed_statement -> IF ( expression ) closed .)


state 169

    (89) open_statement -> IF ( expression ) open .
    }               reduce using rule 89 (open_statement -> IF ( expression ) open .)
    FOR             reduce using rule 89 (open_statement -> IF ( expression ) open .)
    WHILE           reduce using rule 89 (open_statement -> IF ( expression ) open .)
    IF              reduce using rule 89 (open_statement -> IF ( expression ) open .)
    CONTINUE        reduce using rule 89 (open_statement -> IF ( expression ) open .)
    BREAK           reduce using rule 89 (open_statement -> IF ( expression ) open .)
    RETURN          reduce using rule 89 (open_statement -> IF ( expression ) open .)
    {               reduce using rule 89 (open_statement -> IF ( expression ) open .)
    &               reduce using rule 89 (open_statement -> IF ( expression ) open .)
    *               reduce using rule 89 (open_statement -> IF ( expression ) open .)
    !               reduce using rule 89 (open_statement -> IF ( expression ) open .)
    +               reduce using rule 89 (open_statement -> IF ( expression ) open .)
    -               reduce using rule 89 (open_statement -> IF ( expression ) open .)
    (               reduce using rule 89 (open_statement -> IF ( expression ) open .)
    CHARACTER       reduce using rule 89 (open_statement -> IF ( expression ) open .)
    CONST           reduce using rule 89 (open_statement -> IF ( expression ) open .)
    FNUMBER         reduce using rule 89 (open_statement -> IF ( expression ) open .)
    INUMBER         reduce using rule 89 (open_statement -> IF ( expression ) open .)
    ID              reduce using rule 89 (open_statement -> IF ( expression ) open .)
    STRING          reduce using rule 89 (open_statement -> IF ( expression ) open .)


state 170

    (91) open_statement -> IF ( expression ) open_statement .
    }               reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    FOR             reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    WHILE           reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    IF              reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    CONTINUE        reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    BREAK           reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    RETURN          reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    {               reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    &               reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    *               reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    !               reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    +               reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    -               reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    (               reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    CHARACTER       reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    CONST           reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    FNUMBER         reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    INUMBER         reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    ID              reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)
    STRING          reduce using rule 91 (open_statement -> IF ( expression ) open_statement .)


state 171

    (92) open_statement -> IF ( expression ) other_statement .
    (99) closed_statement -> other_statement .
    }               reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    FOR             reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    WHILE           reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    IF              reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    CONTINUE        reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    BREAK           reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    RETURN          reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    {               reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    &               reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    *               reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    !               reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    +               reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    -               reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    (               reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    CHARACTER       reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    CONST           reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    FNUMBER         reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    INUMBER         reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    ID              reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    STRING          reduce using rule 92 (open_statement -> IF ( expression ) other_statement .)
    ELSE            reduce using rule 99 (closed_statement -> other_statement .)


state 172

    (100) closed -> closed_statement . ELSE closed_statement
    (93) open -> closed_statement . ELSE open_statement
    ELSE            shift and go to state 177


state 173

    (88) open_statement -> FOR . ( for_cond ) open_statement
    (96) closed_statement -> FOR . ( for_cond ) closed_statement
    (               shift and go to state 178


state 174

    (90) open_statement -> WHILE . ( expression ) open_statement
    (97) closed_statement -> WHILE . ( expression ) closed_statement
    (               shift and go to state 179


state 175

    (55) argument_expression_list -> argument_expression_list , expression .
    )               reduce using rule 55 (argument_expression_list -> argument_expression_list , expression .)
    ,               reduce using rule 55 (argument_expression_list -> argument_expression_list , expression .)


state 176

    (89) open_statement -> IF ( . expression ) open
    (91) open_statement -> IF ( . expression ) open_statement
    (92) open_statement -> IF ( . expression ) other_statement
    (98) closed_statement -> IF ( . expression ) closed
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    expression                     shift and go to state 180
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 177

    (100) closed -> closed_statement ELSE . closed_statement
    (93) open -> closed_statement ELSE . open_statement
    (96) closed_statement -> . FOR ( for_cond ) closed_statement
    (97) closed_statement -> . WHILE ( expression ) closed_statement
    (98) closed_statement -> . IF ( expression ) closed
    (99) closed_statement -> . other_statement
    (88) open_statement -> . FOR ( for_cond ) open_statement
    (89) open_statement -> . IF ( expression ) open
    (90) open_statement -> . WHILE ( expression ) open_statement
    (91) open_statement -> . IF ( expression ) open_statement
    (92) open_statement -> . IF ( expression ) other_statement
    (85) other_statement -> . jumpstatement
    (86) other_statement -> . expression_statement
    (87) other_statement -> . compound_statement
    (79) jumpstatement -> . CONTINUE ;
    (80) jumpstatement -> . BREAK ;
    (81) jumpstatement -> . RETURN expression ;
    (82) jumpstatement -> . RETURN ;
    (30) expression_statement -> . expression ;
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    FOR             shift and go to state 44
    WHILE           shift and go to state 46
    IF              shift and go to state 48
    CONTINUE        shift and go to state 53
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    {               shift and go to state 23
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    closed_statement               shift and go to state 181
    open_statement                 shift and go to state 182
    expression                     shift and go to state 47
    other_statement                shift and go to state 49
    jumpstatement                  shift and go to state 50
    expression_statement           shift and go to state 51
    compound_statement             shift and go to state 52
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 178

    (88) open_statement -> FOR ( . for_cond ) open_statement
    (96) closed_statement -> FOR ( . for_cond ) closed_statement
    (94) for_cond -> . expression_statement double_expression
    (30) expression_statement -> . expression ;
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    for_cond                       shift and go to state 183
    expression_statement           shift and go to state 124
    expression                     shift and go to state 47
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 179

    (90) open_statement -> WHILE ( . expression ) open_statement
    (97) closed_statement -> WHILE ( . expression ) closed_statement
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    expression                     shift and go to state 184
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 180

    (89) open_statement -> IF ( expression . ) open
    (91) open_statement -> IF ( expression . ) open_statement
    (92) open_statement -> IF ( expression . ) other_statement
    (98) closed_statement -> IF ( expression . ) closed
    )               shift and go to state 185


state 181

    (100) closed -> closed_statement ELSE closed_statement .
    }               reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    FOR             reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    WHILE           reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    IF              reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    CONTINUE        reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    BREAK           reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    RETURN          reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    {               reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    &               reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    *               reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    !               reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    +               reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    -               reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    (               reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    CHARACTER       reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    CONST           reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    FNUMBER         reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    INUMBER         reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    ID              reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    STRING          reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)
    ELSE            reduce using rule 100 (closed -> closed_statement ELSE closed_statement .)


state 182

    (93) open -> closed_statement ELSE open_statement .
    }               reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    FOR             reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    WHILE           reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    IF              reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    CONTINUE        reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    BREAK           reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    RETURN          reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    {               reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    &               reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    *               reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    !               reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    +               reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    -               reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    (               reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    CHARACTER       reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    CONST           reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    FNUMBER         reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    INUMBER         reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    ID              reduce using rule 93 (open -> closed_statement ELSE open_statement .)
    STRING          reduce using rule 93 (open -> closed_statement ELSE open_statement .)


state 183

    (88) open_statement -> FOR ( for_cond . ) open_statement
    (96) closed_statement -> FOR ( for_cond . ) closed_statement
    )               shift and go to state 186


state 184

    (90) open_statement -> WHILE ( expression . ) open_statement
    (97) closed_statement -> WHILE ( expression . ) closed_statement
    )               shift and go to state 187


state 185

    (89) open_statement -> IF ( expression ) . open
    (91) open_statement -> IF ( expression ) . open_statement
    (92) open_statement -> IF ( expression ) . other_statement
    (98) closed_statement -> IF ( expression ) . closed
    (93) open -> . closed_statement ELSE open_statement
    (88) open_statement -> . FOR ( for_cond ) open_statement
    (89) open_statement -> . IF ( expression ) open
    (90) open_statement -> . WHILE ( expression ) open_statement
    (91) open_statement -> . IF ( expression ) open_statement
    (92) open_statement -> . IF ( expression ) other_statement
    (85) other_statement -> . jumpstatement
    (86) other_statement -> . expression_statement
    (87) other_statement -> . compound_statement
    (100) closed -> . closed_statement ELSE closed_statement
    (96) closed_statement -> . FOR ( for_cond ) closed_statement
    (97) closed_statement -> . WHILE ( expression ) closed_statement
    (98) closed_statement -> . IF ( expression ) closed
    (99) closed_statement -> . other_statement
    (79) jumpstatement -> . CONTINUE ;
    (80) jumpstatement -> . BREAK ;
    (81) jumpstatement -> . RETURN expression ;
    (82) jumpstatement -> . RETURN ;
    (30) expression_statement -> . expression ;
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    FOR             shift and go to state 173
    IF              shift and go to state 167
    WHILE           shift and go to state 174
    CONTINUE        shift and go to state 53
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    {               shift and go to state 23
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    expression                     shift and go to state 47
    open                           shift and go to state 169
    open_statement                 shift and go to state 170
    other_statement                shift and go to state 171
    closed                         shift and go to state 168
    closed_statement               shift and go to state 188
    jumpstatement                  shift and go to state 50
    expression_statement           shift and go to state 51
    compound_statement             shift and go to state 52
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 186

    (88) open_statement -> FOR ( for_cond ) . open_statement
    (96) closed_statement -> FOR ( for_cond ) . closed_statement
    (88) open_statement -> . FOR ( for_cond ) open_statement
    (89) open_statement -> . IF ( expression ) open
    (90) open_statement -> . WHILE ( expression ) open_statement
    (91) open_statement -> . IF ( expression ) open_statement
    (92) open_statement -> . IF ( expression ) other_statement
    (96) closed_statement -> . FOR ( for_cond ) closed_statement
    (97) closed_statement -> . WHILE ( expression ) closed_statement
    (98) closed_statement -> . IF ( expression ) closed
    (99) closed_statement -> . other_statement
    (85) other_statement -> . jumpstatement
    (86) other_statement -> . expression_statement
    (87) other_statement -> . compound_statement
    (79) jumpstatement -> . CONTINUE ;
    (80) jumpstatement -> . BREAK ;
    (81) jumpstatement -> . RETURN expression ;
    (82) jumpstatement -> . RETURN ;
    (30) expression_statement -> . expression ;
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    FOR             shift and go to state 173
    IF              shift and go to state 167
    WHILE           shift and go to state 174
    CONTINUE        shift and go to state 53
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    {               shift and go to state 23
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    open_statement                 shift and go to state 163
    closed_statement               shift and go to state 162
    expression                     shift and go to state 47
    other_statement                shift and go to state 49
    jumpstatement                  shift and go to state 50
    expression_statement           shift and go to state 51
    compound_statement             shift and go to state 52
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 187

    (90) open_statement -> WHILE ( expression ) . open_statement
    (97) closed_statement -> WHILE ( expression ) . closed_statement
    (88) open_statement -> . FOR ( for_cond ) open_statement
    (89) open_statement -> . IF ( expression ) open
    (90) open_statement -> . WHILE ( expression ) open_statement
    (91) open_statement -> . IF ( expression ) open_statement
    (92) open_statement -> . IF ( expression ) other_statement
    (96) closed_statement -> . FOR ( for_cond ) closed_statement
    (97) closed_statement -> . WHILE ( expression ) closed_statement
    (98) closed_statement -> . IF ( expression ) closed
    (99) closed_statement -> . other_statement
    (85) other_statement -> . jumpstatement
    (86) other_statement -> . expression_statement
    (87) other_statement -> . compound_statement
    (79) jumpstatement -> . CONTINUE ;
    (80) jumpstatement -> . BREAK ;
    (81) jumpstatement -> . RETURN expression ;
    (82) jumpstatement -> . RETURN ;
    (30) expression_statement -> . expression ;
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    FOR             shift and go to state 173
    IF              shift and go to state 167
    WHILE           shift and go to state 174
    CONTINUE        shift and go to state 53
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    {               shift and go to state 23
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    expression                     shift and go to state 47
    open_statement                 shift and go to state 166
    closed_statement               shift and go to state 165
    other_statement                shift and go to state 49
    jumpstatement                  shift and go to state 50
    expression_statement           shift and go to state 51
    compound_statement             shift and go to state 52
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69

state 188

    (93) open -> closed_statement . ELSE open_statement
    (100) closed -> closed_statement . ELSE closed_statement
    ELSE            shift and go to state 189


state 189

    (93) open -> closed_statement ELSE . open_statement
    (100) closed -> closed_statement ELSE . closed_statement
    (88) open_statement -> . FOR ( for_cond ) open_statement
    (89) open_statement -> . IF ( expression ) open
    (90) open_statement -> . WHILE ( expression ) open_statement
    (91) open_statement -> . IF ( expression ) open_statement
    (92) open_statement -> . IF ( expression ) other_statement
    (96) closed_statement -> . FOR ( for_cond ) closed_statement
    (97) closed_statement -> . WHILE ( expression ) closed_statement
    (98) closed_statement -> . IF ( expression ) closed
    (99) closed_statement -> . other_statement
    (85) other_statement -> . jumpstatement
    (86) other_statement -> . expression_statement
    (87) other_statement -> . compound_statement
    (79) jumpstatement -> . CONTINUE ;
    (80) jumpstatement -> . BREAK ;
    (81) jumpstatement -> . RETURN expression ;
    (82) jumpstatement -> . RETURN ;
    (30) expression_statement -> . expression ;
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    (31) expression -> . assigment_expression
    (32) expression -> . equality_expression
    (33) assigment_expression -> . equality_expression SUBEQ expression
    (34) assigment_expression -> . equality_expression MULEQ expression
    (35) assigment_expression -> . equality_expression DIVEQ expression
    (36) assigment_expression -> . equality_expression MODEQ expression
    (37) assigment_expression -> . equality_expression ADDEQ expression
    (38) assigment_expression -> . equality_expression = expression
    (39) equality_expression -> . equality_expression NE relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression GE additive_expression
    (43) relational_expression -> . relational_expression LAND additive_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression > additive_expression
    (46) relational_expression -> . relational_expression LE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression < additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression - mult_expression
    (68) additive_expression -> . additive_expression + mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression % unary_expression
    (64) mult_expression -> . mult_expression / unary_expression
    (65) mult_expression -> . mult_expression * unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . & unary_expression
    (58) unary_expression -> . * unary_expression
    (59) unary_expression -> . ! unary_expression
    (60) unary_expression -> . + unary_expression
    (61) unary_expression -> . - unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression [ expression ]
    (52) postfix_expression -> . postfix_expression ( )
    (53) postfix_expression -> . postfix_expression ( argument_expression_list )
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . ( expression )
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . CONST
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . INUMBER
    (76) primary_expression -> . ID
    (77) string_literal -> . string_literal STRING
    (78) string_literal -> . STRING
    FOR             shift and go to state 173
    IF              shift and go to state 167
    WHILE           shift and go to state 174
    CONTINUE        shift and go to state 53
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    {               shift and go to state 23
    &               shift and go to state 65
    *               shift and go to state 64
    !               shift and go to state 66
    +               shift and go to state 62
    -               shift and go to state 60
    (               shift and go to state 45
    CHARACTER       shift and go to state 70
    CONST           shift and go to state 71
    FNUMBER         shift and go to state 72
    INUMBER         shift and go to state 73
    ID              shift and go to state 74
    STRING          shift and go to state 75

    closed_statement               shift and go to state 181
    open_statement                 shift and go to state 182
    expression                     shift and go to state 47
    other_statement                shift and go to state 49
    jumpstatement                  shift and go to state 50
    expression_statement           shift and go to state 51
    compound_statement             shift and go to state 52
    assigment_expression           shift and go to state 56
    equality_expression            shift and go to state 57
    relational_expression          shift and go to state 58
    additive_expression            shift and go to state 59
    mult_expression                shift and go to state 61
    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 67
    primary_expression             shift and go to state 68
    string_literal                 shift and go to state 69